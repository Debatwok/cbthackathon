"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusCodes = exports.Channels = exports.SemanticActionStateTypes = exports.InstallationUpdateActionTypes = exports.ContactRelationUpdateActionTypes = exports.DeliveryModes = exports.ActivityImportance = exports.EndOfConversationCodes = exports.ActionTypes = exports.InputHints = exports.MessageReactionTypes = exports.AttachmentLayoutTypes = exports.TextFormatTypes = exports.ActivityTypes = exports.ActivityEventNames = exports.RoleTypes = exports.isActivity = exports.assertActivity = exports.isSemanticAction = exports.assertSemanticAction = exports.isConversationReference = exports.assertConversationReference = exports.isEntity = exports.assertEntity = exports.isAttachment = exports.assertAttachment = exports.isSuggestedActions = exports.assertSuggestedActions = exports.isCardAction = exports.assertCardAction = exports.isMessageReaction = exports.assertMessageReaction = exports.isConversationAccount = exports.assertConversationAccount = exports.isChannelAccount = exports.assertChannelAccount = exports.isAttachmentInfo = exports.assertAttachmentInfo = exports.isAttachmentView = exports.assertAttachmentView = exports.SpeechConstants = exports.CallerIdConstants = void 0;
const botbuilder_stdlib_1 = require("botbuilder-stdlib");
__exportStar(require("./activityInterfaces"), exports);
__exportStar(require("./activityEx"), exports);
var callerIdConstants_1 = require("./callerIdConstants");
Object.defineProperty(exports, "CallerIdConstants", { enumerable: true, get: function () { return callerIdConstants_1.CallerIdConstants; } });
var speechConstants_1 = require("./speechConstants");
Object.defineProperty(exports, "SpeechConstants", { enumerable: true, get: function () { return speechConstants_1.SpeechConstants; } });
// The Teams schemas was manually added to this library. This file has been updated to export those schemas.
__exportStar(require("./teams"), exports);
exports.assertAttachmentView = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.string(value.viewId, path.concat('viewId'));
    botbuilder_stdlib_1.assert.number(value.size, path.concat('size'));
};
const assertAttachmentViewArray = botbuilder_stdlib_1.assert.arrayOf(exports.assertAttachmentView);
exports.isAttachmentView = botbuilder_stdlib_1.assert.toTest(exports.assertAttachmentView);
exports.assertAttachmentInfo = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.string(value.name, path.concat('name'));
    botbuilder_stdlib_1.assert.array(value.views, path.concat('views'));
    assertAttachmentViewArray(value.views, path.concat('views'));
};
exports.isAttachmentInfo = botbuilder_stdlib_1.assert.toTest(exports.assertAttachmentInfo);
exports.assertChannelAccount = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.string(value.id, path.concat('id'));
    botbuilder_stdlib_1.assert.string(value.name, path.concat('name'));
    botbuilder_stdlib_1.assert.maybeString(value.aadObjectId, path.concat('aadObjectId'));
    botbuilder_stdlib_1.assert.maybeString(value.role, path.concat('role'));
};
const assertChannelAccountArray = botbuilder_stdlib_1.assert.arrayOf(exports.assertChannelAccount);
const assertMaybeChannelAccount = botbuilder_stdlib_1.assert.makeMaybe(exports.assertChannelAccount);
exports.isChannelAccount = botbuilder_stdlib_1.assert.toTest(exports.assertChannelAccount);
exports.assertConversationAccount = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.boolean(value.isGroup, path.concat('isGroup'));
    botbuilder_stdlib_1.assert.string(value.conversationType, path.concat('conversationType'));
    botbuilder_stdlib_1.assert.maybeString(value.tenantId, path.concat('tenantId'));
    botbuilder_stdlib_1.assert.string(value.id, path.concat('id'));
    botbuilder_stdlib_1.assert.string(value.name, path.concat('name'));
    botbuilder_stdlib_1.assert.maybeString(value.aadObjectId, path.concat('aadObjectId'));
    botbuilder_stdlib_1.assert.maybeString(value.role, path.concat('role'));
    botbuilder_stdlib_1.assert.any(value.properties, path.concat('properties'));
};
exports.isConversationAccount = botbuilder_stdlib_1.assert.toTest(exports.assertConversationAccount);
exports.assertMessageReaction = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.string(value.type, path.concat('type'));
};
const assertMessageReactionArray = (value, path) => {
    botbuilder_stdlib_1.assert.array(value, path);
    value.forEach((item, idx) => exports.assertMessageReaction(item, path.concat(`[${idx}]`)));
};
exports.isMessageReaction = botbuilder_stdlib_1.assert.toTest(exports.assertMessageReaction);
exports.assertCardAction = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.string(value.type, path.concat('type'));
    botbuilder_stdlib_1.assert.string(value.title, path.concat('title'));
    botbuilder_stdlib_1.assert.maybeString(value.image, path.concat('image'));
    botbuilder_stdlib_1.assert.maybeString(value.text, path.concat('text'));
    botbuilder_stdlib_1.assert.maybeString(value.displayText, path.concat('displayText'));
    botbuilder_stdlib_1.assert.any(value.value, path.concat('value'));
    botbuilder_stdlib_1.assert.maybeAny(value.channelData, path.concat('channelData'));
    botbuilder_stdlib_1.assert.maybeString(value.imageAltText, path.concat('imageAltText'));
};
const assertCardActionArray = botbuilder_stdlib_1.assert.arrayOf(exports.assertCardAction);
exports.isCardAction = botbuilder_stdlib_1.assert.toTest(exports.assertCardAction);
exports.assertSuggestedActions = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.arrayOfString(value.to, path.concat('to'));
    assertCardActionArray(value.actions, path.concat('actions'));
};
exports.isSuggestedActions = botbuilder_stdlib_1.assert.toTest(exports.assertSuggestedActions);
exports.assertAttachment = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.string(value.contentType, path.concat('contentType'));
    botbuilder_stdlib_1.assert.maybeString(value.contentUrl, path.concat('contentUrl'));
    botbuilder_stdlib_1.assert.maybeAny(value.content, path.concat('content'));
    botbuilder_stdlib_1.assert.maybeString(value.name, path.concat('name'));
    botbuilder_stdlib_1.assert.maybeString(value.thumbnailUrl, path.concat('thumbnailUrl'));
};
const assertAttachmentArray = botbuilder_stdlib_1.assert.arrayOf(exports.assertAttachment);
const assertMaybeAttachmentArray = botbuilder_stdlib_1.assert.makeMaybe(assertAttachmentArray);
exports.isAttachment = botbuilder_stdlib_1.assert.toTest(exports.assertAttachment);
exports.assertEntity = (value, path) => {
    botbuilder_stdlib_1.assert.dictionary(value, path);
    botbuilder_stdlib_1.assert.string(value.type, path.concat('type'));
};
const assertEntityArray = botbuilder_stdlib_1.assert.arrayOf(exports.assertEntity);
const assertMaybeEntityArray = botbuilder_stdlib_1.assert.makeMaybe(assertEntityArray);
exports.isEntity = botbuilder_stdlib_1.assert.toTest(exports.assertEntity);
exports.assertConversationReference = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.maybeString(value.activityId, path.concat('activityId'));
    assertMaybeChannelAccount(value.user, path.concat('user'));
    botbuilder_stdlib_1.assert.maybeString(value.locale, path.concat('locale'));
    exports.assertChannelAccount(value.bot, path.concat('bot'));
    botbuilder_stdlib_1.assert.string(value.channelId, path.concat('channelId'));
    botbuilder_stdlib_1.assert.string(value.serviceUrl, path.concat('serviceUrl'));
};
const assertMaybeConversationReference = botbuilder_stdlib_1.assert.makeMaybe(exports.assertConversationReference);
exports.isConversationReference = botbuilder_stdlib_1.assert.toTest(exports.assertConversationReference);
exports.assertSemanticAction = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.string(value.id, path.concat('id'));
    botbuilder_stdlib_1.assert.string(value.state, path.concat('state'));
    botbuilder_stdlib_1.assert.dictionary(value.entities, path.concat('entities'));
};
const assertMaybeSemanticAction = botbuilder_stdlib_1.assert.makeMaybe(exports.assertSemanticAction);
exports.isSemanticAction = botbuilder_stdlib_1.assert.toTest(exports.assertSemanticAction);
exports.assertActivity = (value, path) => {
    botbuilder_stdlib_1.assert.unsafe.castObjectAs(value, path);
    botbuilder_stdlib_1.assert.string(value.type, path.concat('type'));
    botbuilder_stdlib_1.assert.maybeString(value.id, path.concat('id'));
    botbuilder_stdlib_1.assert.maybeDate(value.timestamp, path.concat('timestamp'));
    botbuilder_stdlib_1.assert.maybeDate(value.localTimestamp, path.concat('localTimestamp'));
    botbuilder_stdlib_1.assert.string(value.localTimezone, path.concat('localTimezone'));
    botbuilder_stdlib_1.assert.maybeString(value.callerId, path.concat('callerId'));
    botbuilder_stdlib_1.assert.string(value.serviceUrl, path.concat('serviceUrl'));
    botbuilder_stdlib_1.assert.string(value.channelId, path.concat('channelId'));
    exports.assertChannelAccount(value.from, path.concat('from'));
    exports.assertConversationAccount(value.conversation, path.concat('conversation'));
    exports.assertChannelAccount(value.recipient, path.concat('recipient'));
    botbuilder_stdlib_1.assert.maybeString(value.textFormat, path.concat('textFormat'));
    botbuilder_stdlib_1.assert.maybeString(value.attachmentLayout, path.concat('attachmentLayout'));
    assertChannelAccountArray(value.membersAdded, path.concat('membersAdded'));
    assertChannelAccountArray(value.membersRemoved, path.concat('membersRemoved'));
    assertMessageReactionArray(value.reactionsAdded, path.concat('reactionsAdded'));
    assertMessageReactionArray(value.reactionsRemoved, path.concat('reactionsRemoved'));
    botbuilder_stdlib_1.assert.maybeString(value.topicName, path.concat('topicName'));
    botbuilder_stdlib_1.assert.maybeBoolean(value.historyDisclosed, path.concat('historyDisclosed'));
    botbuilder_stdlib_1.assert.maybeString(value.locale, path.concat('locale'));
    botbuilder_stdlib_1.assert.string(value.text, path.concat('text'));
    botbuilder_stdlib_1.assert.maybeString(value.speak, path.concat('speak'));
    botbuilder_stdlib_1.assert.maybeString(value.inputHint, path.concat('inputHint'));
    botbuilder_stdlib_1.assert.maybeString(value.summary, path.concat('summary'));
    exports.assertSuggestedActions(value.suggestedActions, path.concat('suggestedActions'));
    assertMaybeAttachmentArray(value.attachments, path.concat('attachments'));
    assertMaybeEntityArray(value.entities, path.concat('entities'));
    botbuilder_stdlib_1.assert.maybeAny(value.channelData, path.concat('channelData'));
    botbuilder_stdlib_1.assert.maybeString(value.action, path.concat('action'));
    botbuilder_stdlib_1.assert.maybeString(value.replyToId, path.concat('replyToId'));
    botbuilder_stdlib_1.assert.string(value.label, path.concat('label'));
    botbuilder_stdlib_1.assert.string(value.valueType, path.concat('valueType'));
    botbuilder_stdlib_1.assert.maybeAny(value.value, path.concat('value'));
    botbuilder_stdlib_1.assert.maybeString(value.name, path.concat('name'));
    assertMaybeConversationReference(value.relatesTo, path.concat('relatesTo'));
    botbuilder_stdlib_1.assert.maybeString(value.code, path.concat('code'));
    botbuilder_stdlib_1.assert.maybeDate(value.expiration, path.concat('expiration'));
    botbuilder_stdlib_1.assert.maybeString(value.importance, path.concat('importance'));
    botbuilder_stdlib_1.assert.maybeString(value.deliveryMode, path.concat('deliveryMode'));
    const assertArrayOfStrings = botbuilder_stdlib_1.assert.arrayOf(botbuilder_stdlib_1.assert.string);
    assertArrayOfStrings(value.listenFor, path.concat('listenFor'));
    assertMaybeSemanticAction(value.semanticAction, path.concat('semanticAction'));
};
exports.isActivity = botbuilder_stdlib_1.assert.toTest(exports.assertActivity);
/**
 * Defines values for RoleTypes.
 * Possible values include: 'user', 'bot', 'skill'
 *
 * @readonly
 * @enum {string}
 */
var RoleTypes;
(function (RoleTypes) {
    RoleTypes["User"] = "user";
    RoleTypes["Bot"] = "bot";
    RoleTypes["Skill"] = "skill";
})(RoleTypes = exports.RoleTypes || (exports.RoleTypes = {}));
/**
 * Defines values for ActivityEventNames.
 * Possible values include: 'continueConversation', 'createConversation'
 *
 * @readonly
 * @enum {string}
 */
var ActivityEventNames;
(function (ActivityEventNames) {
    ActivityEventNames["ContinueConversation"] = "ContinueConversation";
    ActivityEventNames["CreateConversation"] = "CreateConversation";
})(ActivityEventNames = exports.ActivityEventNames || (exports.ActivityEventNames = {}));
/**
 * Defines values for ActivityTypes.
 * Possible values include: 'message', 'contactRelationUpdate', 'conversationUpdate', 'typing',
 * 'endOfConversation', 'event', 'invoke', 'deleteUserData', 'messageUpdate', 'messageDelete',
 * 'installationUpdate', 'messageReaction', 'suggestion', 'trace', 'handoff'
 *
 * @readonly
 * @enum {string}
 */
var ActivityTypes;
(function (ActivityTypes) {
    ActivityTypes["Message"] = "message";
    ActivityTypes["ContactRelationUpdate"] = "contactRelationUpdate";
    ActivityTypes["ConversationUpdate"] = "conversationUpdate";
    ActivityTypes["Typing"] = "typing";
    ActivityTypes["EndOfConversation"] = "endOfConversation";
    ActivityTypes["Event"] = "event";
    ActivityTypes["Invoke"] = "invoke";
    ActivityTypes["InvokeResponse"] = "invokeResponse";
    ActivityTypes["DeleteUserData"] = "deleteUserData";
    ActivityTypes["MessageUpdate"] = "messageUpdate";
    ActivityTypes["MessageDelete"] = "messageDelete";
    ActivityTypes["InstallationUpdate"] = "installationUpdate";
    ActivityTypes["MessageReaction"] = "messageReaction";
    ActivityTypes["Suggestion"] = "suggestion";
    ActivityTypes["Trace"] = "trace";
    ActivityTypes["Handoff"] = "handoff";
    ActivityTypes["Command"] = "command";
    ActivityTypes["CommandResult"] = "commandResult";
})(ActivityTypes = exports.ActivityTypes || (exports.ActivityTypes = {}));
/**
 * Defines values for TextFormatTypes.
 * Possible values include: 'markdown', 'plain', 'xml'
 *
 * @readonly
 * @enum {string}
 */
var TextFormatTypes;
(function (TextFormatTypes) {
    TextFormatTypes["Markdown"] = "markdown";
    TextFormatTypes["Plain"] = "plain";
    TextFormatTypes["Xml"] = "xml";
})(TextFormatTypes = exports.TextFormatTypes || (exports.TextFormatTypes = {}));
/**
 * Defines values for AttachmentLayoutTypes.
 * Possible values include: 'list', 'carousel'
 *
 * @readonly
 * @enum {string}
 */
var AttachmentLayoutTypes;
(function (AttachmentLayoutTypes) {
    AttachmentLayoutTypes["List"] = "list";
    AttachmentLayoutTypes["Carousel"] = "carousel";
})(AttachmentLayoutTypes = exports.AttachmentLayoutTypes || (exports.AttachmentLayoutTypes = {}));
/**
 * Defines values for MessageReactionTypes.
 * Possible values include: 'like', 'plusOne'
 *
 * @readonly
 * @enum {string}
 */
var MessageReactionTypes;
(function (MessageReactionTypes) {
    MessageReactionTypes["Like"] = "like";
    MessageReactionTypes["PlusOne"] = "plusOne";
})(MessageReactionTypes = exports.MessageReactionTypes || (exports.MessageReactionTypes = {}));
/**
 * Defines values for InputHints.
 * Possible values include: 'acceptingInput', 'ignoringInput', 'expectingInput'
 *
 * @readonly
 * @enum {string}
 */
var InputHints;
(function (InputHints) {
    InputHints["AcceptingInput"] = "acceptingInput";
    InputHints["IgnoringInput"] = "ignoringInput";
    InputHints["ExpectingInput"] = "expectingInput";
})(InputHints = exports.InputHints || (exports.InputHints = {}));
/**
 * Defines values for ActionTypes.
 * Possible values include: 'openUrl', 'imBack', 'postBack', 'playAudio', 'playVideo', 'showImage',
 * 'downloadFile', 'signin', 'call', messageBack', 'openApp'
 *
 * @readonly
 * @enum {string}
 */
var ActionTypes;
(function (ActionTypes) {
    ActionTypes["OpenUrl"] = "openUrl";
    ActionTypes["ImBack"] = "imBack";
    ActionTypes["PostBack"] = "postBack";
    ActionTypes["PlayAudio"] = "playAudio";
    ActionTypes["PlayVideo"] = "playVideo";
    ActionTypes["ShowImage"] = "showImage";
    ActionTypes["DownloadFile"] = "downloadFile";
    ActionTypes["Signin"] = "signin";
    ActionTypes["Call"] = "call";
    // @deprecated Bot Framework no longer supports payments
    ActionTypes["Payment"] = "payment";
    ActionTypes["MessageBack"] = "messageBack";
    ActionTypes["OpenApp"] = "openApp";
})(ActionTypes = exports.ActionTypes || (exports.ActionTypes = {}));
/**
 * Defines values for EndOfConversationCodes.
 * Possible values include: 'unknown', 'completedSuccessfully', 'userCancelled', 'botTimedOut',
 * 'botIssuedInvalidMessage', 'channelFailed'
 *
 * @readonly
 * @enum {string}
 */
var EndOfConversationCodes;
(function (EndOfConversationCodes) {
    EndOfConversationCodes["Unknown"] = "unknown";
    EndOfConversationCodes["CompletedSuccessfully"] = "completedSuccessfully";
    EndOfConversationCodes["UserCancelled"] = "userCancelled";
    EndOfConversationCodes["BotTimedOut"] = "botTimedOut";
    EndOfConversationCodes["BotIssuedInvalidMessage"] = "botIssuedInvalidMessage";
    EndOfConversationCodes["ChannelFailed"] = "channelFailed";
})(EndOfConversationCodes = exports.EndOfConversationCodes || (exports.EndOfConversationCodes = {}));
/**
 * Defines values for ActivityImportance.
 * Possible values include: 'low', 'normal', 'high'
 *
 * @readonly
 * @enum {string}
 */
var ActivityImportance;
(function (ActivityImportance) {
    ActivityImportance["Low"] = "low";
    ActivityImportance["Normal"] = "normal";
    ActivityImportance["High"] = "high";
})(ActivityImportance = exports.ActivityImportance || (exports.ActivityImportance = {}));
/**
 * Defines values for DeliveryModes.
 * Possible values include: 'normal', 'notification', 'expectReplies', 'ephemeral'
 *
 * @readonly
 * @enum {string}
 */
var DeliveryModes;
(function (DeliveryModes) {
    DeliveryModes["Normal"] = "normal";
    DeliveryModes["Notification"] = "notification";
    DeliveryModes["ExpectReplies"] = "expectReplies";
    DeliveryModes["Ephemeral"] = "ephemeral";
})(DeliveryModes = exports.DeliveryModes || (exports.DeliveryModes = {}));
/**
 * Defines values for ContactRelationUpdateActionTypes.
 * Possible values include: 'add', 'remove'
 *
 * @readonly
 * @enum {string}
 */
var ContactRelationUpdateActionTypes;
(function (ContactRelationUpdateActionTypes) {
    ContactRelationUpdateActionTypes["Add"] = "add";
    ContactRelationUpdateActionTypes["Remove"] = "remove";
})(ContactRelationUpdateActionTypes = exports.ContactRelationUpdateActionTypes || (exports.ContactRelationUpdateActionTypes = {}));
/**
 * Defines values for InstallationUpdateActionTypes.
 * Possible values include: 'add', 'remove'
 *
 * @readonly
 * @enum {string}
 */
var InstallationUpdateActionTypes;
(function (InstallationUpdateActionTypes) {
    InstallationUpdateActionTypes["Add"] = "add";
    InstallationUpdateActionTypes["Remove"] = "remove";
})(InstallationUpdateActionTypes = exports.InstallationUpdateActionTypes || (exports.InstallationUpdateActionTypes = {}));
/**
 * Defines values for SemanticActionStateTypes.
 * Possible values include: 'start', 'continue', 'done'
 *
 * @readonly
 * @enum {string}
 */
var SemanticActionStateTypes;
(function (SemanticActionStateTypes) {
    SemanticActionStateTypes["Start"] = "start";
    SemanticActionStateTypes["Continue"] = "continue";
    SemanticActionStateTypes["Done"] = "done";
})(SemanticActionStateTypes = exports.SemanticActionStateTypes || (exports.SemanticActionStateTypes = {}));
/**
 * Defines values for ChannelIds for Channels.
 * Possible values include: 'alexa', 'console', 'cortana', 'directline', 'directlinespeech', 'email',
 * 'emulator', 'facebook', 'groupme', 'kik', 'line', 'msteams', 'skype', 'skypeforbusiness',
 * 'slack', 'sms', 'telegram', 'test', 'twilio-sms', 'webchat'
 *
 * @readonly
 * @enum {string}
 */
var Channels;
(function (Channels) {
    Channels["Alexa"] = "alexa";
    Channels["Console"] = "console";
    Channels["Directline"] = "directline";
    Channels["DirectlineSpeech"] = "directlinespeech";
    Channels["Email"] = "email";
    Channels["Emulator"] = "emulator";
    Channels["Facebook"] = "facebook";
    Channels["Groupme"] = "groupme";
    Channels["Kik"] = "kik";
    Channels["Line"] = "line";
    Channels["Msteams"] = "msteams";
    Channels["Skype"] = "skype";
    Channels["Skypeforbusiness"] = "skypeforbusiness";
    Channels["Slack"] = "slack";
    Channels["Sms"] = "sms";
    Channels["Telegram"] = "telegram";
    Channels["Telephony"] = "telephony";
    Channels["Test"] = "test";
    Channels["Twilio"] = "twilio-sms";
    Channels["Webchat"] = "webchat";
})(Channels = exports.Channels || (exports.Channels = {}));
/**
 * Defines values for StatusCodes.
 * Possible values include: 200, 400, 401, 404, 405, 409, 426, 500, 501, 502
 *
 * @readonly
 * @enum {number}
 */
var StatusCodes;
(function (StatusCodes) {
    StatusCodes[StatusCodes["OK"] = 200] = "OK";
    StatusCodes[StatusCodes["CREATED"] = 201] = "CREATED";
    StatusCodes[StatusCodes["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
    StatusCodes[StatusCodes["BAD_REQUEST"] = 400] = "BAD_REQUEST";
    StatusCodes[StatusCodes["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    StatusCodes[StatusCodes["NOT_FOUND"] = 404] = "NOT_FOUND";
    StatusCodes[StatusCodes["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
    StatusCodes[StatusCodes["CONFLICT"] = 409] = "CONFLICT";
    StatusCodes[StatusCodes["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
    StatusCodes[StatusCodes["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
    StatusCodes[StatusCodes["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    StatusCodes[StatusCodes["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
    StatusCodes[StatusCodes["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
})(StatusCodes = exports.StatusCodes || (exports.StatusCodes = {}));
//# sourceMappingURL=index.js.map