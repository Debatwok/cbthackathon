"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordServiceClientCredentialFactory = void 0;
const adal = require("adal-node");
const botbuilder_stdlib_1 = require("botbuilder-stdlib");
const microsoftAppCredentials_1 = require("./microsoftAppCredentials");
const authenticationConstants_1 = require("./authenticationConstants");
const governmentConstants_1 = require("./governmentConstants");
/**
 * A simple implementation of the [ServiceClientCredentialsFactory](xref:botframework-connector.ServiceClientCredentialsFactory) interface.
 */
class PasswordServiceClientCredentialFactory {
    constructor(appId, password) {
        this.appId = appId;
        this.password = password;
    }
    isValidAppId(appId = '') {
        return __awaiter(this, void 0, void 0, function* () {
            return appId === this.appId;
        });
    }
    isAuthenticationDisabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return botbuilder_stdlib_1.tests.isStringNullOrEmpty(this.appId);
        });
    }
    createCredentials(appId, audience, loginEndpoint, validateAuthority) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.isAuthenticationDisabled()) {
                return microsoftAppCredentials_1.MicrosoftAppCredentials.Empty;
            }
            if (!(yield this.isValidAppId(appId))) {
                throw new Error('Invalid appId.');
            }
            let credentials;
            let normalizedEndpoint = loginEndpoint === null || loginEndpoint === void 0 ? void 0 : loginEndpoint.toLowerCase();
            if (normalizedEndpoint === null || normalizedEndpoint === void 0 ? void 0 : normalizedEndpoint.startsWith(authenticationConstants_1.AuthenticationConstants.ToChannelFromBotLoginUrlPrefix)) {
                // TODO: Unpack necessity of these empty credentials based on the loginEndpoint as no tokens are fetched when auth is disabled.
                credentials =
                    appId == null
                        ? microsoftAppCredentials_1.MicrosoftAppCredentials.Empty
                        : new microsoftAppCredentials_1.MicrosoftAppCredentials(appId, this.password, undefined, audience);
            }
            else if (normalizedEndpoint === governmentConstants_1.GovernmentConstants.ToChannelFromBotLoginUrl.toLowerCase()) {
                credentials =
                    appId == null
                        ? new microsoftAppCredentials_1.MicrosoftAppCredentials(undefined, undefined, undefined, governmentConstants_1.GovernmentConstants.ToChannelFromBotOAuthScope)
                        : new microsoftAppCredentials_1.MicrosoftAppCredentials(appId, this.password, undefined, audience);
                normalizedEndpoint = loginEndpoint;
            }
            else {
                credentials =
                    appId == null
                        ? new PrivateCloudAppCredentials(undefined, undefined, undefined, normalizedEndpoint, validateAuthority)
                        : new PrivateCloudAppCredentials(appId, this.password, audience, normalizedEndpoint, validateAuthority);
            }
            credentials.oAuthEndpoint = normalizedEndpoint;
            return credentials;
        });
    }
}
exports.PasswordServiceClientCredentialFactory = PasswordServiceClientCredentialFactory;
class PrivateCloudAppCredentials extends microsoftAppCredentials_1.MicrosoftAppCredentials {
    constructor(appId, password, oAuthScope, oAuthEndpoint, validateAuthority) {
        super(appId, password, undefined, oAuthScope);
        this.oAuthEndpoint = oAuthEndpoint;
        this._validateAuthority = validateAuthority;
    }
    /**
     * Gets a value indicating whether to validate the Authority.
     *
     * @returns The ValidateAuthority value to use.
     */
    get validateAuthority() {
        return this._validateAuthority;
    }
    /**
     * Gets the OAuth endpoint to use.
     *
     * @returns The OAuthEndpoint to use.
     */
    get oAuthEndpoint() {
        return this.__oAuthEndpoint;
    }
    /**
     * Sets the OAuth endpoint to use.
     */
    set oAuthEndpoint(value) {
        // aadApiVersion is set to '1.5' to avoid the "spn:" concatenation on the audience claim
        // For more info, see https://github.com/AzureAD/azure-activedirectory-library-for-nodejs/issues/128
        this.__oAuthEndpoint = value;
        this.authenticationContext = new adal.AuthenticationContext(value, this.validateAuthority, undefined, '1.5');
    }
}
//# sourceMappingURL=passwordServiceClientCredentialFactory.js.map