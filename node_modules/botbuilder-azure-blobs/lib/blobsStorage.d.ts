import { StoragePipelineOptions } from '@azure/storage-blob';
import { Storage, StoreItems } from 'botbuilder-core';
/**
 * Optional settings for BlobsStorage
 */
export interface BlobsStorageOptions {
    /**
     * [StoragePipelineOptions](xref:@azure/storage-blob.StoragePipelineOptions) to pass to azure blob
     * storage client
     */
    storagePipelineOptions?: StoragePipelineOptions;
}
/**
 * BlobsStorage provides a [Storage](xref:botbuilder-core.Storage) implementation backed by Azure Blob Storage
 */
export declare class BlobsStorage implements Storage {
    private readonly _containerClient;
    private readonly _concurrency;
    private _initializePromise?;
    /**
     * Constructs a BlobsStorage instance.
     *
     * @param {string} connectionString Azure Blob Storage connection string
     * @param {string} containerName Azure Blob Storage container name
     * @param {BlobsStorageOptions} options Other options for BlobsStorage
     */
    constructor(connectionString: string, containerName: string, options?: BlobsStorageOptions);
    private toJSON;
    private _initialize;
    /**
     * Loads store items from storage.
     *
     * @param {string[]} keys Array of item keys to read
     * @returns {Promise<StoreItems>} The fetched [StoreItems](xref:botbuilder-core.StoreItems)
     */
    read(keys: string[]): Promise<StoreItems>;
    /**
     * Saves store items to storage.
     *
     * @param {StoreItems} changes Map of [StoreItems](xref:botbuilder-core.StoreItems) to write to storage
     * @returns {Promise<void>} A promise representing the async operation
     */
    write(changes: StoreItems): Promise<void>;
    /**
     * Removes store items from storage.
     *
     * @param {string[]} keys Array of item keys to remove from the store
     * @returns {Promise<void>} A promise representing the async operation
     */
    delete(keys: string[]): Promise<void>;
}
//# sourceMappingURL=blobsStorage.d.ts.map