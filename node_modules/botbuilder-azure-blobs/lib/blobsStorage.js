"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlobsStorage = void 0;
const z = __importStar(require("zod"));
const get_stream_1 = __importDefault(require("get-stream"));
const p_map_1 = __importDefault(require("p-map"));
const storage_blob_1 = require("@azure/storage-blob");
const ignoreError_1 = require("./ignoreError");
const sanitizeBlobKey_1 = require("./sanitizeBlobKey");
/**
 * BlobsStorage provides a [Storage](xref:botbuilder-core.Storage) implementation backed by Azure Blob Storage
 */
class BlobsStorage {
    /**
     * Constructs a BlobsStorage instance.
     *
     * @param {string} connectionString Azure Blob Storage connection string
     * @param {string} containerName Azure Blob Storage container name
     * @param {BlobsStorageOptions} options Other options for BlobsStorage
     */
    constructor(connectionString, containerName, options) {
        this._concurrency = Infinity;
        z.object({ connectionString: z.string(), containerName: z.string() }).parse({
            connectionString,
            containerName,
        });
        this._containerClient = new storage_blob_1.ContainerClient(connectionString, containerName, options === null || options === void 0 ? void 0 : options.storagePipelineOptions);
        // At most one promise at a time to be friendly to local emulator users
        if (connectionString.trim() === 'UseDevelopmentStorage=true;') {
            this._concurrency = 1;
        }
    }
    // Protects against JSON.stringify cycles
    toJSON() {
        return { name: 'BlobsStorage' };
    }
    _initialize() {
        if (!this._initializePromise) {
            this._initializePromise = this._containerClient.createIfNotExists();
        }
        return this._initializePromise;
    }
    /**
     * Loads store items from storage.
     *
     * @param {string[]} keys Array of item keys to read
     * @returns {Promise<StoreItems>} The fetched [StoreItems](xref:botbuilder-core.StoreItems)
     */
    read(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            z.object({ keys: z.array(z.string()) }).parse({ keys });
            yield this._initialize();
            return (yield p_map_1.default(keys, (key) => __awaiter(this, void 0, void 0, function* () {
                const result = { key, value: undefined };
                const blob = yield ignoreError_1.ignoreError(this._containerClient.getBlobClient(sanitizeBlobKey_1.sanitizeBlobKey(key)).download(), ignoreError_1.isStatusCodeError(404));
                if (!blob) {
                    return result;
                }
                const { etag: eTag, readableStreamBody: stream } = blob;
                if (!stream) {
                    return result;
                }
                const contents = yield get_stream_1.default(stream);
                const parsed = JSON.parse(contents);
                result.value = Object.assign(Object.assign({}, parsed), { eTag });
                return result;
            }), {
                concurrency: this._concurrency,
            })).reduce((acc, { key, value }) => (value ? Object.assign(Object.assign({}, acc), { [key]: value }) : acc), {});
        });
    }
    /**
     * Saves store items to storage.
     *
     * @param {StoreItems} changes Map of [StoreItems](xref:botbuilder-core.StoreItems) to write to storage
     * @returns {Promise<void>} A promise representing the async operation
     */
    write(changes) {
        return __awaiter(this, void 0, void 0, function* () {
            z.record(z.unknown()).parse(changes);
            yield this._initialize();
            yield p_map_1.default(Object.entries(changes), (_a) => {
                var [key, _b] = _a, { eTag = '' } = _b, change = __rest(_b, ["eTag"]);
                const blob = this._containerClient.getBlockBlobClient(sanitizeBlobKey_1.sanitizeBlobKey(key));
                const serialized = JSON.stringify(change);
                return blob.upload(serialized, serialized.length, {
                    conditions: typeof eTag === 'string' && eTag !== '*' ? { ifMatch: eTag } : {},
                });
            }, {
                concurrency: this._concurrency,
            });
        });
    }
    /**
     * Removes store items from storage.
     *
     * @param {string[]} keys Array of item keys to remove from the store
     * @returns {Promise<void>} A promise representing the async operation
     */
    delete(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            z.object({ keys: z.array(z.string()) }).parse({ keys });
            yield this._initialize();
            yield p_map_1.default(keys, (key) => ignoreError_1.ignoreError(this._containerClient.deleteBlob(sanitizeBlobKey_1.sanitizeBlobKey(key)), ignoreError_1.isStatusCodeError(404)), {
                concurrency: this._concurrency,
            });
        });
    }
}
exports.BlobsStorage = BlobsStorage;
//# sourceMappingURL=blobsStorage.js.map