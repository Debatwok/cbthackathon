"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isStatusCodeError = exports.ignoreError = void 0;
const storage_blob_1 = require("@azure/storage-blob");
/**
 * Wrap a promise and provide a function to decide whether to ignore a type of error
 *
 * @template T expected promise return type
 * @param {Promise<T>} promise a promise to await
 * @param {IgnoreError} ignore method that returns true if an error should be ignored
 * @returns {Promise<T | null>} a promise that resolves to `T` or `null` after ignoring any matched errors
 */
function ignoreError(promise, ignore) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield promise;
        }
        catch (err) {
            if (!ignore(err)) {
                throw err;
            }
            else {
                return null;
            }
        }
    });
}
exports.ignoreError = ignoreError;
/**
 * Ignore RestErrors that match a set of status codes.
 *
 * @param {number[]} codes HTTP status codes that should not be considered errors
 * @returns {IgnoreError} a function that accepts an error and returns true if it represents one of the ignored status codes
 */
function isStatusCodeError(...codes) {
    const ignoredCodes = new Set(codes);
    return function (err) {
        return err instanceof storage_blob_1.RestError && err.statusCode != null && ignoredCodes.has(err.statusCode);
    };
}
exports.isStatusCodeError = isStatusCodeError;
//# sourceMappingURL=ignoreError.js.map