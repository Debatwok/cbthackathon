import { AbstractParseTreeVisitor } from 'antlr4ts/tree';
import { Diagnostic } from './diagnostic';
import * as lp from './generated/LGTemplateParser';
import { LGTemplateParserVisitor } from './generated/LGTemplateParserVisitor';
import { Templates } from './templates';
/**
 * LG managed code checker.
 */
export declare class StaticChecker extends AbstractParseTreeVisitor<Diagnostic[]> implements LGTemplateParserVisitor<Diagnostic[]> {
    private readonly templates;
    private currentTemplate;
    private _expressionParser;
    /**
     * Creates a new instance of the [StaticChecker](xref:botbuilder-lg.StaticChecker) class.
     * @param templates [Templates](xref:botbuilder-lg.Templates) to be checked.
     */
    constructor(templates: Templates);
    /**
     * @private
     * Creates a property because we want this to be lazy loaded.
     */
    private readonly expressionParser;
    /**
     * Return error messages list.
     * @returns Report result.
     */
    check(): Diagnostic[];
    /**
     * Visit a parse tree produced by `LGTemplateParser.normalTemplateBody`.
     * @param context The parse tree.
     */
    visitNormalTemplateBody(context: lp.NormalTemplateBodyContext): Diagnostic[];
    /**
     * Visit a parse tree produced by `LGTemplateParser.structuredTemplateBody`.
     * @param context The parse tree.
     */
    visitStructuredTemplateBody(context: lp.StructuredTemplateBodyContext): Diagnostic[];
    /**
     * Visit a parse tree produced by the `ifElseBody` labeled alternative in `LGTemplateParser.body`.
     * @param context The parse tree.
     */
    visitIfElseBody(context: lp.IfElseBodyContext): Diagnostic[];
    /**
     * Visit a parse tree produced by the `switchCaseBody` labeled alternative in `LGTemplateParser.body`.
     * @param context The parse tree.
     */
    visitSwitchCaseBody(context: lp.SwitchCaseBodyContext): Diagnostic[];
    /**
     * Visit a parse tree produced by `LGTemplateParser.normalTemplateString`.
     * @param context The parse tree.
     */
    visitNormalTemplateString(context: lp.NormalTemplateStringContext): Diagnostic[];
    /**
     * Gets the default value returned by visitor methods.
     * @returns Empty [Diagnostic](xref:botbuilder-lg.Diagnostic) array.
     */
    protected defaultResult(): Diagnostic[];
    /**
     * @private
     */
    private checkExpression;
    /**
     * @private
     */
    private buildLGDiagnostic;
}
//# sourceMappingURL=staticChecker.d.ts.map