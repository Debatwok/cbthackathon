"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Centralized LG errors.
 */
class TemplateErrors {
}
TemplateErrors.noTemplate = `LG file must have at least one template definition.`;
TemplateErrors.invalidTemplateBody = `Invalid template body. Expecting '-' prefix.`;
TemplateErrors.missingStrucEnd = `Invalid structure body. Expecting ']' at the end of the body.`;
TemplateErrors.emptyStrucContent = `Invalid structure body. Body cannot be empty.`;
TemplateErrors.invalidWhitespaceInCondition = `Invalid condition: At most 1 whitespace allowed between 'IF/ELSEIF/ELSE' and ':'.`;
TemplateErrors.notStartWithIfInCondition = `Invalid condition: Conditions must start with 'IF/ELSEIF/ELSE' prefix.`;
TemplateErrors.multipleIfInCondition = `Invalid template body. There cannot be more than one 'IF' condition. Expecting 'IFELSE' or 'ELSE' statement.`;
TemplateErrors.notEndWithElseInCondition = `Conditional response template does not end with 'ELSE' condition.`;
TemplateErrors.invalidMiddleInCondition = `Invalid template body. Expecting 'ELSEIF'.`;
TemplateErrors.invalidExpressionInCondition = `Invalid condition. 'IF', 'ELSEIF' definitions must include a valid expression.`;
TemplateErrors.extraExpressionInCondition = `Invalid condition. 'ELSE' definition cannot include an expression.`;
TemplateErrors.missingTemplateBodyInCondition = `Invalid condition body. Conditions must include a valid body.`;
TemplateErrors.invalidWhitespaceInSwitchCase = `Invalid condition: At most 1 whitespace allowed between 'SWITCH/CASE/DEFAULT' and ':'.`;
TemplateErrors.notStartWithSwitchInSwitchCase = `Invalid conditional response template. Expecting a 'SWITCH' statement?`;
TemplateErrors.multipleSwithStatementInSwitchCase = `Invalid template body. There cannot be more than one 'SWITCH' statement. Expecting 'CASE' or 'DEFAULT' statement.`;
TemplateErrors.invalidStatementInMiddlerOfSwitchCase = `Invalid template body. Expecting a 'CASE' statement.`;
TemplateErrors.notEndWithDefaultInSwitchCase = `Conditional response template does not end with 'DEFAULT' condition.`;
TemplateErrors.missingCaseInSwitchCase = `Invalid template body. Expecting at least one 'CASE' statement.`;
TemplateErrors.invalidExpressionInSwiathCase = `Invalid condition. 'SWITCH' and 'CASE' statements must include a valid expression.`;
TemplateErrors.extraExpressionInSwitchCase = `Invalid condition. 'DEFAULT' statement cannot include an expression.`;
TemplateErrors.missingTemplateBodyInSwitchCase = `Invalid condition body. Expecing valid body inside a 'CASE' or 'DEFAULT' block.`;
TemplateErrors.noEndingInMultiline = 'Expecting "```" to close the multi-line block.';
TemplateErrors.noCloseBracket = `Close } is missing in Expression.`;
TemplateErrors.loopDetected = `Loop detected:`;
TemplateErrors.invalidMemory = `Scope is not a LG customized memory.`;
TemplateErrors.staticFailure = `Static failure with the following error.`;
TemplateErrors.invalidTemplateNameType = 'Expected string type for the parameter of template function.';
TemplateErrors.importFormatError = `Import format should follow '[x](y)' or '[x](y) as z'.`;
TemplateErrors.invalidStrucBody = (invalidBody) => `Invalid structure body: '${invalidBody}'. Body can include <PropertyName> = <Value> pairs or \${reference()} template reference.`;
TemplateErrors.invalidStrucName = (invalidName) => `Invalid structure name: '${invalidName}'. name should start with letter/number/_ and can only contains letter/number/./_.`;
TemplateErrors.syntaxError = (unexpectedContent) => `${unexpectedContent}. Expecting a comment, template definition, import statement or option definition.`;
TemplateErrors.invalidTemplateName = (invalidTemplateName) => `Invalid template name: '${invalidTemplateName}'. Template names can only contain letter, underscore '_' or number. Any part of a template name (split by '.') cannot start with a number.`;
TemplateErrors.invalidParameter = (invalidParameter) => `Invalid parameter name: '${invalidParameter}'. Parameter names can only contain letter, underscore '_' or number.`;
TemplateErrors.duplicatedTemplateInSameTemplate = (templateName) => `Duplicated definitions found for template: '${templateName}'.`;
TemplateErrors.duplicatedTemplateInDiffTemplate = (templateName, source) => `Duplicated definitions found for template: '${templateName}' in '${source}'.`;
TemplateErrors.noTemplateBody = (templateName) => `Missing template body in template '${templateName}'.`;
TemplateErrors.templateNotExist = (templateName) => `No such template '${templateName}'.`;
TemplateErrors.errorExpression = (refFullText, templateName, prefixText) => `[${templateName}] ${prefixText} Error occurred when evaluating '${refFullText}'.`;
TemplateErrors.nullExpression = (expression) => `'${expression}' evaluated to null.`;
TemplateErrors.argumentMismatch = (templateName, expectedCount, actualCount) => `arguments mismatch for template '` +
    `${templateName}` +
    `'. Expecting '` +
    `${expectedCount}` +
    `' arguments, actual '` +
    `${actualCount}` +
    `'.`;
TemplateErrors.templateExist = (templateName) => `template '${templateName}' already exists.`;
TemplateErrors.expressionParseError = (exp) => `Error occurred when parsing expression '${exp}'.`;
exports.TemplateErrors = TemplateErrors;
//# sourceMappingURL=templateErrors.js.map