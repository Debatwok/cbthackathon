"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tree_1 = require("antlr4ts/tree");
const diagnostic_1 = require("./diagnostic");
const evaluator_1 = require("./evaluator");
const templates_1 = require("./templates");
const templateErrors_1 = require("./templateErrors");
const range_1 = require("./range");
const templateExtensions_1 = require("./templateExtensions");
/**
 * LG managed code checker.
 */
class StaticChecker extends tree_1.AbstractParseTreeVisitor {
    /**
     * Creates a new instance of the [StaticChecker](xref:botbuilder-lg.StaticChecker) class.
     * @param templates [Templates](xref:botbuilder-lg.Templates) to be checked.
     */
    constructor(templates) {
        super();
        this.templates = templates;
    }
    /**
     * @private
     * Creates a property because we want this to be lazy loaded.
     */
    get expressionParser() {
        if (this._expressionParser === undefined) {
            // create an evaluator to leverage it's customized function look up for checking
            const evaluator = new evaluator_1.Evaluator(this.templates, this.templates.lgOptions);
            this._expressionParser = evaluator.expressionParser;
        }
        return this._expressionParser;
    }
    /**
     * Return error messages list.
     * @returns Report result.
     */
    check() {
        const result = [];
        if (this.templates.allTemplates.length === 0) {
            const diagnostic = new diagnostic_1.Diagnostic(range_1.Range.DefaultRange, templateErrors_1.TemplateErrors.noTemplate, diagnostic_1.DiagnosticSeverity.Warning, this.templates.source);
            result.push(diagnostic);
            return result;
        }
        for (const template of this.templates) {
            this.currentTemplate = template;
            const templateDiagnostics = [];
            for (const reference of this.templates.references) {
                const sameTemplates = reference.toArray().filter((u) => u.name === template.name);
                for (const sameTemplate of sameTemplates) {
                    const startLine = template.sourceRange.range.start.line;
                    const range = new range_1.Range(startLine, 0, startLine, template.name.length + 1);
                    const diagnostic = new diagnostic_1.Diagnostic(range, templateErrors_1.TemplateErrors.duplicatedTemplateInDiffTemplate(sameTemplate.name, sameTemplate.sourceRange.source), diagnostic_1.DiagnosticSeverity.Error, this.templates.source);
                    templateDiagnostics.push(diagnostic);
                }
            }
            if (templateDiagnostics.length === 0 && template.templateBodyParseTree !== undefined) {
                templateDiagnostics.push(...this.visit(template.templateBodyParseTree));
            }
            result.push(...templateDiagnostics);
        }
        return result;
    }
    /**
     * Visit a parse tree produced by `LGTemplateParser.normalTemplateBody`.
     * @param context The parse tree.
     */
    visitNormalTemplateBody(context) {
        let result = [];
        for (const templateStr of context.templateString()) {
            const errorTemplateStr = templateStr.errorTemplateString();
            if (errorTemplateStr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidTemplateBody, undefined, errorTemplateStr));
            }
            else {
                result = result.concat(this.visit(templateStr));
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by `LGTemplateParser.structuredTemplateBody`.
     * @param context The parse tree.
     */
    visitStructuredTemplateBody(context) {
        let result = [];
        const errorName = context.structuredBodyNameLine().errorStructuredName();
        if (errorName !== undefined) {
            result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidStrucName(errorName.text), undefined, context.structuredBodyNameLine()));
        }
        if (context.structuredBodyEndLine() === undefined) {
            result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.missingStrucEnd, undefined, context));
        }
        const errors = context.errorStructureLine();
        if (errors && errors.length > 0) {
            for (const error of errors) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidStrucBody(error.text), undefined, error));
            }
        }
        else {
            const bodys = context.structuredBodyContentLine();
            if (!bodys || bodys.length === 0) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.emptyStrucContent, undefined, context));
            }
            else {
                for (const body of bodys) {
                    if (body.expressionInStructure() !== undefined) {
                        result = result.concat(this.checkExpression(body.expressionInStructure()));
                    }
                    else {
                        const structureValues = body.keyValueStructureLine().keyValueStructureValue();
                        const errorPrefix = `Property  '` + body.keyValueStructureLine().text + `':`;
                        for (const structureValue of structureValues) {
                            for (const expr of structureValue.expressionInStructure()) {
                                result = result.concat(this.checkExpression(expr, errorPrefix));
                            }
                        }
                    }
                }
            }
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the `ifElseBody` labeled alternative in `LGTemplateParser.body`.
     * @param context The parse tree.
     */
    visitIfElseBody(context) {
        let result = [];
        const ifRules = context.ifElseTemplateBody().ifConditionRule();
        let idx = 0;
        for (const ifRule of ifRules) {
            const conditionNode = ifRule.ifCondition();
            const ifExpr = conditionNode.IF() !== undefined;
            const elseIfExpr = conditionNode.ELSEIF() !== undefined;
            const elseExpr = conditionNode.ELSE() !== undefined;
            const node = ifExpr
                ? conditionNode.IF()
                : elseIfExpr
                    ? conditionNode.ELSEIF()
                    : conditionNode.ELSE();
            if (node.text.split(' ').length - 1 > 1) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidWhitespaceInCondition, undefined, conditionNode));
            }
            if (idx === 0 && !ifExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.notStartWithIfInCondition, diagnostic_1.DiagnosticSeverity.Warning, conditionNode));
            }
            if (idx > 0 && ifExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.multipleIfInCondition, undefined, conditionNode));
            }
            if (idx === ifRules.length - 1 && !elseExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.notEndWithElseInCondition, diagnostic_1.DiagnosticSeverity.Warning, conditionNode));
            }
            if (idx > 0 && idx < ifRules.length - 1 && !elseIfExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidMiddleInCondition, undefined, conditionNode));
            }
            if (!elseExpr) {
                if (ifRule.ifCondition().expression().length !== 1) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidExpressionInCondition, undefined, conditionNode));
                }
                else {
                    const errorPrefix = `Condition '` + conditionNode.expression(0).text + `': `;
                    result = result.concat(this.checkExpression(conditionNode.expression(0), errorPrefix));
                }
            }
            else {
                if (ifRule.ifCondition().expression().length !== 0) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.extraExpressionInCondition, undefined, conditionNode));
                }
            }
            if (ifRule.normalTemplateBody() !== undefined) {
                result = result.concat(this.visit(ifRule.normalTemplateBody()));
            }
            else {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.missingTemplateBodyInCondition, undefined, conditionNode));
            }
            idx = idx + 1;
        }
        return result;
    }
    /**
     * Visit a parse tree produced by the `switchCaseBody` labeled alternative in `LGTemplateParser.body`.
     * @param context The parse tree.
     */
    visitSwitchCaseBody(context) {
        let result = [];
        const switchCaseNodes = context.switchCaseTemplateBody().switchCaseRule();
        let idx = 0;
        const length = switchCaseNodes.length;
        for (const iterNode of switchCaseNodes) {
            const switchCaseStat = iterNode.switchCaseStat();
            const switchExpr = switchCaseStat.SWITCH() !== undefined;
            const caseExpr = switchCaseStat.CASE() !== undefined;
            const defaultExpr = switchCaseStat.DEFAULT() !== undefined;
            const node = switchExpr
                ? switchCaseStat.SWITCH()
                : caseExpr
                    ? switchCaseStat.CASE()
                    : switchCaseStat.DEFAULT();
            if (node.text.split(' ').length - 1 > 1) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidWhitespaceInSwitchCase, undefined, switchCaseStat));
            }
            if (idx === 0 && !switchExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.notStartWithSwitchInSwitchCase, undefined, switchCaseStat));
            }
            if (idx > 0 && switchExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.multipleSwithStatementInSwitchCase, undefined, switchCaseStat));
            }
            if (idx > 0 && idx < length - 1 && !caseExpr) {
                result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidStatementInMiddlerOfSwitchCase, undefined, switchCaseStat));
            }
            if (idx === length - 1 && (caseExpr || defaultExpr)) {
                if (caseExpr) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.notEndWithDefaultInSwitchCase, diagnostic_1.DiagnosticSeverity.Warning, switchCaseStat));
                }
                else {
                    if (length === 2) {
                        result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.missingCaseInSwitchCase, diagnostic_1.DiagnosticSeverity.Warning, switchCaseStat));
                    }
                }
            }
            if (switchExpr || caseExpr) {
                if (switchCaseStat.expression().length !== 1) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.invalidExpressionInSwiathCase, undefined, switchCaseStat));
                }
                else {
                    let errorPrefix = switchExpr ? 'Switch' : 'Case';
                    errorPrefix += ` '${switchCaseStat.expression(0).text}': `;
                    result = result.concat(this.checkExpression(switchCaseStat.expression(0), errorPrefix));
                }
            }
            else {
                if (switchCaseStat.expression().length !== 0 || switchCaseStat.TEXT().length !== 0) {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.extraExpressionInSwitchCase, undefined, switchCaseStat));
                }
            }
            if (caseExpr || defaultExpr) {
                if (iterNode.normalTemplateBody()) {
                    result = result.concat(this.visit(iterNode.normalTemplateBody()));
                }
                else {
                    result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.missingTemplateBodyInSwitchCase, undefined, switchCaseStat));
                }
            }
            idx = idx + 1;
        }
        return result;
    }
    /**
     * Visit a parse tree produced by `LGTemplateParser.normalTemplateString`.
     * @param context The parse tree.
     */
    visitNormalTemplateString(context) {
        const prefixErrorMsg = templateExtensions_1.TemplateExtensions.getPrefixErrorMessage(context);
        let result = [];
        for (const expression of context.expression()) {
            result = result.concat(this.checkExpression(expression, prefixErrorMsg));
        }
        const multiLinePrefix = context.MULTILINE_PREFIX();
        const multiLineSuffix = context.MULTILINE_SUFFIX();
        if (multiLinePrefix !== undefined && multiLineSuffix === undefined) {
            result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.noEndingInMultiline, undefined, context));
        }
        return result;
    }
    /**
     * Gets the default value returned by visitor methods.
     * @returns Empty [Diagnostic](xref:botbuilder-lg.Diagnostic) array.
     */
    defaultResult() {
        return [];
    }
    /**
     * @private
     */
    checkExpression(expressionContext, prefix = '') {
        const result = [];
        let exp = expressionContext.text;
        if (!exp.endsWith('}')) {
            result.push(this.buildLGDiagnostic(templateErrors_1.TemplateErrors.noCloseBracket, undefined, expressionContext));
        }
        else {
            exp = templateExtensions_1.TemplateExtensions.trimExpression(exp);
            try {
                this.expressionParser.parse(exp);
            }
            catch (e) {
                const suffixErrorMsg = evaluator_1.Evaluator.concatErrorMsg(templateErrors_1.TemplateErrors.expressionParseError(exp), e.message);
                const errorMsg = evaluator_1.Evaluator.concatErrorMsg(prefix, suffixErrorMsg);
                result.push(this.buildLGDiagnostic(errorMsg, undefined, expressionContext));
                return result;
            }
        }
        return result;
    }
    /**
     * @private
     */
    buildLGDiagnostic(message, severity = undefined, context = undefined) {
        const lineOffset = this.currentTemplate !== undefined ? this.currentTemplate.sourceRange.range.start.line : 0;
        let templateNameInfo = '';
        if (this.currentTemplate !== undefined &&
            this.currentTemplate.name.startsWith(templates_1.Templates.inlineTemplateIdPrefix)) {
            templateNameInfo = `[${this.currentTemplate.name}]`;
        }
        const range = context === undefined
            ? new range_1.Range(lineOffset + 1, 0, lineOffset + 1, 0)
            : templateExtensions_1.TemplateExtensions.convertToRange(context, lineOffset);
        return new diagnostic_1.Diagnostic(range, templateNameInfo + message, severity, this.templates.source);
    }
}
exports.StaticChecker = StaticChecker;
//# sourceMappingURL=staticChecker.js.map