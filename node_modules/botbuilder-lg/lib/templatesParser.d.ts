import { FileContext } from './generated/LGFileParser';
import { Templates } from './templates';
import { ExpressionParser } from 'adaptive-expressions';
import { AbstractParseTreeVisitor, ParseTree } from 'antlr4ts/tree';
import { LGTemplateParserVisitor } from './generated/LGTemplateParserVisitor';
import * as lp from './generated/LGFileParser';
import { LGResource } from './lgResource';
export declare type ImportResolverDelegate = (lgResource: LGResource, resourceId: string) => LGResource;
/**
 * LG Parser
 */
export declare class TemplatesParser {
    /**
     * Inline text id.
     */
    static readonly inlineContentId: string;
    /**
     * option regex.
     */
    static readonly optionRegex: RegExp;
    /**
     * Import regex.
     */
    static readonly importRegex: RegExp;
    /**
     * parse a file and return LG file.
     * @param filePath LG absolute file path..
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @returns New lg file.
     */
    static parseFile(filePath: string, importResolver?: ImportResolverDelegate, expressionParser?: ExpressionParser): Templates;
    /**
     * Parser to turn lg content into a Templates.
     * @deprecated This method will soon be deprecated. Use ParseResource instead.
     * @param content Text content contains lg templates.
     * @param id Id is the identifier of content. If importResolver is undefined, id must be a full path string.
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @returns Entity.
     */
    static parseText(content: string, id?: string, importResolver?: ImportResolverDelegate, expressionParser?: ExpressionParser): Templates;
    /**
     * Parser to turn lg content into a Templates.
     * @param resource LG resource.
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @param cachedTemplates Give the file path and templates to avoid parsing and to improve performance.
     * @returns Entity.
     */
    static parseResource(resource: LGResource, importResolver?: ImportResolverDelegate, expressionParser?: ExpressionParser): Templates;
    /**
     * Parser to turn lg content into a Templates based on the original Templates.
     * @param content Text content contains lg templates.
     * @param originalTemplates Original templates
     */
    static parseTextWithRef(content: string, originalTemplates: Templates): Templates;
    /**
     * Default import resolver, using relative/absolute file path to access the file content.
     * @param resource Original Resource.
     * @param resourceId Import path.
     */
    static defaultFileResolver(resource: LGResource, resourceId: string): LGResource;
    /**
     * Parser to turn lg content into a Templates.
     * @param resource LG resource.
     * @param importResolver Resolver to resolve LG import id to template text.
     * @param expressionParser Expression parser for evaluating expressions.
     * @param cachedTemplates Give the file path and templates to avoid parsing and to improve performance.
     * @param parentTemplates Parent visited Templates.
     * @returns Entity.
     */
    private static innerParseResource;
    /**
     * Parse LG content and return the AST.
     * @param resource LG resource.
     * @returns The abstract syntax tree of lg file.
     */
    static antlrParseTemplates(resource: LGResource): FileContext;
    /**
     * @private
     */
    private static getReferences;
    /**
     * @private
     */
    private static resolveImportResources;
}
/**
 * Templates transformer. Add more details and body context into the templates object.
 */
export declare class TemplatesTransformer extends AbstractParseTreeVisitor<void> implements LGTemplateParserVisitor<void> {
    private readonly identifierRegex;
    private readonly templateNamePartRegex;
    private readonly templates;
    /**
     * Creates a new instance of the [TemplatesTransformer](xref:botbuilder-lg.TemplatesTransformer) class.
     * @param templates Templates.
     */
    constructor(templates: Templates);
    /**
     * Transform the parse tree into templates.
     * @param parseTree Input abstract syntax tree.
     */
    transform(parseTree: ParseTree): Templates;
    /**
     * Gets the default value returned by visitor methods.
     * Method not implemented.
     */
    protected defaultResult(): void;
    /**
     * Visit a parse tree produced by `LGFileParser.errorDefinition`.
     * @param context The parse tree.
     */
    visitErrorDefinition(context: lp.ErrorDefinitionContext): void;
    /**
     * Visit a parse tree produced by `LGFileParser.importDefinition`.
     * @param context The parse tree.
     */
    visitImportDefinition(context: lp.ImportDefinitionContext): void;
    /**
     * Visit a parse tree produced by `LGFileParser.optionDefinition`.
     * @param context The parse tree.
     */
    visitOptionDefinition(context: lp.OptionDefinitionContext): void;
    /**
     * Visit a parse tree produced by `LGFileParser.templateDefinition`.
     * @param context The parse tree.
     */
    visitTemplateDefinition(context: lp.TemplateDefinitionContext): void;
    /**
     * @private
     */
    private checkTemplateName;
    /**
     * @private
     */
    private checkTemplateParameters;
    /**
     * @private
     */
    private checkTemplateBody;
    /**
     * @private
     */
    private antlrParseTemplate;
    /**
     * @private
     */
    private removeTrailingNewline;
    /**
     * @private
     */
    private extractTemplateNameLine;
    /**
     * @private
     */
    private buildTemplatesDiagnostic;
}
//# sourceMappingURL=templatesParser.d.ts.map