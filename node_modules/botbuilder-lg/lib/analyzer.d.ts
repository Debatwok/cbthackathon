/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { AbstractParseTreeVisitor } from 'antlr4ts/tree';
import * as lp from './generated/LGTemplateParser';
import { LGTemplateParserVisitor } from './generated/LGTemplateParserVisitor';
import { AnalyzerResult } from './analyzerResult';
import { Templates } from './templates';
import { EvaluationOptions } from './evaluationOptions';
/**
 * Analyzer engine. To get the static analyzer results.
 */
export declare class Analyzer extends AbstractParseTreeVisitor<AnalyzerResult> implements LGTemplateParserVisitor<AnalyzerResult> {
    /**
     * Templates.
     */
    readonly templates: Templates;
    private readonly templateMap;
    private readonly evalutationTargetStack;
    private readonly _expressionParser;
    /**
     * Creates a new instance of the [Analyzer](xref:botbuilder-lg.Analyzer) class.
     * @param templates Templates.
     * @param opt Options for LG.
     */
    constructor(templates: Templates, opt?: EvaluationOptions);
    /**
     * Analyze a template to get the static analyzer results.
     * @param templateName Template name.
     * @returns Analyze result including variables and template references.
     */
    analyzeTemplate(templateName: string): AnalyzerResult;
    /**
     * Visit a parse tree produced by the normalBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitNormalBody(ctx: lp.NormalBodyContext): AnalyzerResult;
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateBody.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitNormalTemplateBody(ctx: lp.NormalTemplateBodyContext): AnalyzerResult;
    /**
     * Visit a parse tree produced by LGTemplateParser.structuredTemplateBody.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitStructuredTemplateBody(ctx: lp.StructuredTemplateBodyContext): AnalyzerResult;
    /**
     * Visit a parse tree produced by LGTemplateParser.structuredValue.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitStructureValue(ctx: lp.KeyValueStructureLineContext): AnalyzerResult;
    /**
     * Visit a parse tree produced by the ifElseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitIfElseBody(ctx: lp.IfElseBodyContext): AnalyzerResult;
    /**
     * Visit a parse tree produced by the switchCaseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitSwitchCaseBody(ctx: lp.SwitchCaseBodyContext): AnalyzerResult;
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateString.
     * @param ctx The parse tree.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    visitNormalTemplateString(ctx: lp.NormalTemplateStringContext): AnalyzerResult;
    /**
     * Gets the default value returned by visitor methods.
     * @returns An instance of the AnalyzerResult class.
     * @returns The [AnalyzerResult](xref:botbuilder-lg.AnalyzerResult) instance.
     */
    protected defaultResult(): AnalyzerResult;
    /**
     * @private
     */
    private analyzeExpressionDirectly;
    /**
     * @private
     */
    private analyzeExpression;
}
//# sourceMappingURL=analyzer.d.ts.map