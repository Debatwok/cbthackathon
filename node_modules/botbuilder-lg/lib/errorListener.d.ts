/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ANTLRErrorListener, RecognitionException, Recognizer } from 'antlr4ts';
/**
 * LG parser error listener.
 */
export declare class ErrorListener implements ANTLRErrorListener<void> {
    private readonly source;
    private lineOffset;
    /**
     * Creates a new instance of the [ErrorListener](xref:botbuilder-lg.ErrorListener) class.
     * @param errorSource String value that represents the source of the error.
     * @param lineOffset Offset of the line where the error occurred.
     */
    constructor(errorSource: string, lineOffset?: number);
    /**
     * Notifies any interested parties upon a syntax error.
     * @param recognizer What parser got the error. From this object, you can access the context as well as the input stream.
     * @param offendingSymbol Offending token in the input token stream, unless recognizer is a lexer (then it's null).
     * @param line Line number in the input where the error occurred.
     * @param charPositionInLine Character position within the line where the error occurred.
     * @param msg Message to emit.
     * @param e Exception.
     */
    syntaxError<T>(recognizer: Recognizer<T, any>, offendingSymbol: any, line: number, charPositionInLine: number, msg: string, e: RecognitionException | undefined): void;
}
//# sourceMappingURL=errorListener.d.ts.map