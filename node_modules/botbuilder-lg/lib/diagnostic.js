"use strict";
/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const templatesParser_1 = require("./templatesParser");
/**
 * DiagnosticSeverity enum
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    DiagnosticSeverity[DiagnosticSeverity["Error"] = 0] = "Error";
    DiagnosticSeverity[DiagnosticSeverity["Warning"] = 1] = "Warning";
    DiagnosticSeverity[DiagnosticSeverity["Information"] = 2] = "Information";
    DiagnosticSeverity[DiagnosticSeverity["Hint"] = 3] = "Hint";
})(DiagnosticSeverity = exports.DiagnosticSeverity || (exports.DiagnosticSeverity = {}));
/**
 * Diagnostic class
 */
class Diagnostic {
    /**
     * Creates a new instance of the [Diagnostic](xref:botbuilder-lg.Diagnostic) class.
     * @param range Range where the error or warning occurred.
     * @param message Error message of the error or warning.
     * @param severity Severity of the error or warning.
     * @param source Source of the error or warning occurred.
     * @param code Code or identifier of the error or warning.
     */
    constructor(range, message, severity = DiagnosticSeverity.Error, source, code) {
        this.message = message;
        this.range = range;
        this.severity = severity;
        this.source = source;
        this.code = code;
    }
    /**
     * Returns a string that represents the current [Diagnostic](xref:botbuilder-lg.Diagnostic) object.
     * @returns A string that represents the current [Diagnostic](xref:botbuilder-lg.Diagnostic).
     */
    toString() {
        // ignore error range if source is "inline content"
        if (this.source === templatesParser_1.TemplatesParser.inlineContentId) {
            return `[${DiagnosticSeverity[this.severity]}] ${this.source} ${this.message.toString()}`;
        }
        else {
            return `[${DiagnosticSeverity[this.severity]}] ${this.source} ${this.range.toString()}: ${this.message.toString()}`;
        }
    }
}
exports.Diagnostic = Diagnostic;
//# sourceMappingURL=diagnostic.js.map