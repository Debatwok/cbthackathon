/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { MemoryInterface } from 'adaptive-expressions';
/**
 * A customized memory designed for LG evaluation, in which
 * we want to make sure the global memory (the first memory passed in) can be
 * accessible at any sub evaluation process.
 */
export declare class CustomizedMemory implements MemoryInterface {
    /**
     * Global memory.
     */
    globalMemory: MemoryInterface;
    /**
     * Local memory.
     */
    localMemory: MemoryInterface;
    /**
     * Creates a new instance of the [CustomizedMemory](xref:botbuilder-lg.CustomizedMemory) class.
     * @param scope Optional. Scope.
     * @param localMemory Optional. Local memory.
     */
    constructor(scope?: unknown, localMemory?: MemoryInterface);
    /**
     *  Try to get the value from a given path. Firstly, get result from global memory,
     *  if global memory does not contain, get from local memory.
     * @param path Memory path.
     * @returns Resolved value.
     */
    getValue(path: string): any;
    /**
     * Set value to a given path. This method is not implemented.
     * @param _path Memory path.
     * @param _value Value to set.
     */
    setValue(_path: string, _value: any): void;
    /**
     * Used to identify whether a particular memory instance has been updated or not.
     * If version is not changed, the caller may choose to use the cached result instead of recomputing everything.
     * @returns A string indicating the version.
     */
    version(): string;
}
//# sourceMappingURL=customizedMemory.d.ts.map