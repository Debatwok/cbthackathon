/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { AbstractParseTreeVisitor } from 'antlr4ts/tree';
import { ExpressionParser, MemoryInterface } from 'adaptive-expressions';
import * as lp from './generated/LGTemplateParser';
import { LGTemplateParserVisitor } from './generated/LGTemplateParserVisitor';
import { Template } from './template';
import { EvaluationOptions } from './evaluationOptions';
import { Templates } from './templates';
/**
 * Filr formats.
 */
export declare enum FileFormat {
    /**
     * Get the evaluated result from the Raw.
     */
    Evaluated = "Evaluated",
    /**
     * Get raw text content of the file.
     */
    Raw = "Raw",
    /**
     * Get binary result from the file.
     */
    Binary = "Binary"
}
/**
 * Evaluation runtime engine
 */
export declare class Evaluator extends AbstractParseTreeVisitor<unknown> implements LGTemplateParserVisitor<unknown> {
    /**
     * Templates.
     */
    readonly templates: Templates;
    /**
     * Expression parser.
     */
    readonly expressionParser: ExpressionParser;
    /**
     * TemplateMap.
     */
    readonly templateMap: {
        [name: string]: Template;
    };
    private readonly evaluationTargetStack;
    private readonly lgOptions;
    private readonly cacheResult;
    static readonly LGType = "lgType";
    static readonly activityAttachmentFunctionName = "ActivityAttachment";
    static readonly fromFileFunctionName = "fromFile";
    static readonly templateFunctionName = "template";
    static readonly isTemplateFunctionName = "isTemplate";
    static readonly expandTextFunctionName = "expandText";
    static readonly ReExecuteSuffix = "!";
    /**
     * Creates a new instance of the [Evaluator](xref:botbuilder-lg.Evaluator) class.
     * @param templates Templates.
     * @param opt Options for LG.
     */
    constructor(templates: Templates, opt?: EvaluationOptions);
    /**
     * Evaluate a template with given name and scope.
     * @param inputTemplateName Template name.
     * @param scope Scope.
     * @returns Evaluate result.
     */
    evaluateTemplate(inputTemplateName: string, scope: unknown): unknown;
    /**
     * Visit a parse tree produced by LGTemplateParser.structuredTemplateBody.
     * @param ctx The parse tree.
     * @returns The result of visiting the structured template body.
     */
    visitStructuredTemplateBody(ctx: lp.StructuredTemplateBodyContext): unknown;
    /**
     * @private
     */
    private visitStructureValue;
    /**
     * Visit a parse tree produced by the normalBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The result of visiting the normal body.
     */
    visitNormalBody(ctx: lp.NormalBodyContext): unknown;
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateBody.
     * @param ctx The parse tree.
     * @returns The result of visiting the normal template body.
     */
    visitNormalTemplateBody(ctx: lp.NormalTemplateBodyContext): unknown;
    /**
     * Visit a parse tree produced by the ifElseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     */
    visitIfElseBody(ctx: lp.IfElseBodyContext): unknown;
    /**
     * Visit a parse tree produced by LGTemplateParser.normalTemplateString.
     * @param ctx The parse tree.
     * @returns The string result of visiting the normal template string.
     */
    visitNormalTemplateString(ctx: lp.NormalTemplateStringContext): unknown;
    /**
     * Constructs the scope for mapping the values of arguments to the parameters of the template.
     * Throws errors if certain errors detected [TemplateErrors](xref:botbuilder-lg.TemplateErrors).
     * @param inputTemplateName Template name to evaluate.
     * @param args Arguments to map to the template parameters.
     * @param allTemplates All templates.
     * @returns The current scope if the number of arguments is 0, otherwise, returns a [CustomizedMemory](xref:botbuilder-lg.CustomizedMemory)
     * with the mapping of the parameter name to the argument value added to the scope.
     */
    constructScope(inputTemplateName: string, args: unknown[], allTemplates: Template[]): MemoryInterface;
    /**
     * Visit a parse tree produced by the switchCaseBody labeled alternative in LGTemplateParser.body.
     * @param ctx The parse tree.
     * @returns The string result of visiting the switch case body.
     */
    visitSwitchCaseBody(ctx: lp.SwitchCaseBodyContext): unknown;
    /**
     * Replaces an expression contained in text.
     * @param exp Expression Text.
     * @param regex Regex to select the text to replace.
     */
    wrappedEvalTextContainsExpression(exp: string, regex: RegExp): string;
    /**
     * Gets the default value returned by visitor methods.
     * @returns Empty string.
     */
    protected defaultResult(): string;
    /**
     * Concatenates two error messages.
     * @param firstError First error message to concatenate.
     * @param secondError Second error message to concatenate.
     * @returns The concatenated error messages.
     */
    static concatErrorMsg(firstError: string, secondError: string): string;
    /**
     * Checks an expression result and throws the corresponding error.
     * @param exp Expression text.
     * @param error Error message.
     * @param result Result.
     * @param templateName Template name.
     * @param inlineContent Optional. In line content.
     * @param errorPrefix Optional. Error prefix.
     */
    static checkExpressionResult(exp: string, error: string, result: unknown, templateName: string, inlineContent?: string, errorPrefix?: string): void;
    /**
     * @private
     */
    private currentTarget;
    /**
     * @private
     */
    private evalCondition;
    /**
     * @private
     */
    private evalExpressionInCondition;
    /**
     * @private
     */
    private evalExpression;
    /**
     * @private
     */
    private evalByAdaptiveExpression;
    private readonly customizedEvaluatorLookup;
    private readonly isTemplate;
    private readonly fromFile;
    private readonly expandText;
    /**
     * @private
     */
    private getResourcePath;
    private readonly activityAttachment;
    private readonly evaluateWithTemplates;
    private readonly templateFunction;
    private readonly validateTemplateFunction;
    /**
     * @private
     */
    private checkTemplateReference;
    private readonly templateEvaluator;
    private readonly validTemplateReference;
    /**
     * @private
     */
    private parseTemplateName;
}
//# sourceMappingURL=evaluator.d.ts.map