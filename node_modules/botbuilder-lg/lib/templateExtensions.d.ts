/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as lp from './generated/LGTemplateParser';
import { ParserRuleContext } from 'antlr4ts';
import { Range } from './range';
/**
 * Extension methods for LG.
 */
export declare class TemplateExtensions {
    /**
     * Trim expression. ${abc} => abc,  ${a == {}} => a == {}.
     * @param expression Input expression string.
     * @returns Pure expression string.
     */
    static trimExpression(expression: string): string;
    /**
     * Normalize authored path to os path.
     * path is from authored content which doesn't know what OS it is running on.
     * This method treats / and \ both as seperators regardless of OS, for windows that means / -> \ and for linux/mac \ -> /.
     * This allows author to use ../foo.lg or ..\foo.lg as equivelents for importing.
     * @param ambiguousPath AuthoredPath.
     * @returns Path expressed as OS path.
     */
    static normalizePath(ambiguousPath: string): string;
    /**
     * Get prefix error message from normal template sting context.
     * @param context Normal template sting context.
     * @returns Prefix error message.
     */
    static getPrefixErrorMessage(context: lp.NormalTemplateStringContext): string;
    /**
     * If a value is pure Expression.
     * @param ctx Key value structure value context.
     */
    static isPureExpression(ctx: lp.KeyValueStructureValueContext): boolean;
    /**
     * Escape \ from text.
     * @param exp Input text.
     * @returns Escaped text.
     */
    static evalEscape(exp: string): string;
    /**
     * Generate new guid string.
     */
    static newGuid(): string;
    /**
     * read line from text.
     * @param input Text content.
     */
    static readLine(input: string): string[];
    /**
     * Convert antlr parser into Range.
     * @param context Antlr parse context.
     * @param [lineOffset] Line offset.
     * @returns Range object.
     */
    static convertToRange(context: ParserRuleContext, lineOffset?: number): Range;
}
//# sourceMappingURL=templateExtensions.d.ts.map