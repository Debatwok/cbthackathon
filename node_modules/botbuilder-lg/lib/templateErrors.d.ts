/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Centralized LG errors.
 */
export declare class TemplateErrors {
    static readonly noTemplate: string;
    static readonly invalidTemplateBody: string;
    static readonly missingStrucEnd: string;
    static readonly emptyStrucContent: string;
    static readonly invalidWhitespaceInCondition: string;
    static readonly notStartWithIfInCondition: string;
    static readonly multipleIfInCondition: string;
    static readonly notEndWithElseInCondition: string;
    static readonly invalidMiddleInCondition: string;
    static readonly invalidExpressionInCondition: string;
    static readonly extraExpressionInCondition: string;
    static readonly missingTemplateBodyInCondition: string;
    static readonly invalidWhitespaceInSwitchCase: string;
    static readonly notStartWithSwitchInSwitchCase: string;
    static readonly multipleSwithStatementInSwitchCase: string;
    static readonly invalidStatementInMiddlerOfSwitchCase: string;
    static readonly notEndWithDefaultInSwitchCase: string;
    static readonly missingCaseInSwitchCase: string;
    static readonly invalidExpressionInSwiathCase: string;
    static readonly extraExpressionInSwitchCase: string;
    static readonly missingTemplateBodyInSwitchCase: string;
    static readonly noEndingInMultiline: string;
    static readonly noCloseBracket: string;
    static readonly loopDetected: string;
    static readonly invalidMemory: string;
    static readonly staticFailure: string;
    static readonly invalidTemplateNameType: string;
    static readonly importFormatError: string;
    static readonly invalidStrucBody: (invalidBody: string) => string;
    static readonly invalidStrucName: (invalidName: string) => string;
    static readonly syntaxError: (unexpectedContent: string) => string;
    static readonly invalidTemplateName: (invalidTemplateName: string) => string;
    static readonly invalidParameter: (invalidParameter: string) => string;
    static readonly duplicatedTemplateInSameTemplate: (templateName: string) => string;
    static readonly duplicatedTemplateInDiffTemplate: (templateName: string, source: string) => string;
    static readonly noTemplateBody: (templateName: string) => string;
    static readonly templateNotExist: (templateName: string) => string;
    static readonly errorExpression: (refFullText: string, templateName: string, prefixText: string) => string;
    static readonly nullExpression: (expression: string) => string;
    static readonly argumentMismatch: (templateName: string, expectedCount: number, actualCount: number) => string;
    static readonly templateExist: (templateName: string) => string;
    static readonly expressionParseError: (exp: string) => string;
}
//# sourceMappingURL=templateErrors.d.ts.map