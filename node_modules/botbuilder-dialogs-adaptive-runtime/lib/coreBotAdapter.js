"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreBotAdapter = void 0;
const botbuilder_1 = require("botbuilder");
class CoreBotAdapter extends botbuilder_1.CloudAdapter {
    constructor(botFrameworkAuthentication, conversationState, userState) {
        super(botFrameworkAuthentication);
        this.conversationState = conversationState;
        botbuilder_1.useBotState(this, userState, conversationState);
        this.onTurnError = (context, err) => __awaiter(this, void 0, void 0, function* () {
            console.error('[onTurnError] unhandled error', err);
            // Send the exception message to the user. Since the default behavior does not
            // send logs or trace activities, the bot appears hanging without any activity
            // to the user.
            yield context.sendActivity(err instanceof Error ? err.message : err).catch(() => null);
            // Delete the conversationState for the current conversation to prevent the
            // bot from getting stuck in a error-loop caused by being in a bad state.
            yield this.conversationState.delete(context);
            throw err; // re-throw to delegate error handling to integration libraries
        });
    }
}
exports.CoreBotAdapter = CoreBotAdapter;
//# sourceMappingURL=coreBotAdapter.js.map