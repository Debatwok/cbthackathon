import { Configuration } from './configuration';
import { ServiceCollection } from 'botbuilder-dialogs-adaptive-runtime-core';
/**
 * Construct all runtime services.
 *
 * @param applicationRoot absolute path to root of application
 * @param settingsDirectory directory where settings files are located
 * @returns service collection and configuration
 *
 * @remarks
 * While the full set of dependencies is designed to be sufficient to run Adaptive Dialogs,
 * the `"bot"` dependency can actually be any [ActivityHandler](xref:botbuilder-core.ActivityHandler)
 * implementation and is not constrained to one that uses Adaptive Dialogs. Any Bot Framework project
 * can therefore be simplified by just using this function along with a custom
 * [ActivityHandler](xref:botbuilder-core.ActivityHandler) implementation.
 *
 * Aspects of the behavior of a number of these dependencies, including those that can be overriden,
 * can be controlled through configuration.
 *
 * The default [ResourceExplorer](xref:botbuilder-dialogs-declarative.ResourceExplorer) uses the file
 * system. The `applicationRoot` folder is used as the root directory.
 *
 * If not overridden, the exact type of [Storage](xref:botbuilder-core.Storage) added depends on configuration.
 * With no configuration, the default is memory storage. It should be noted that
 * [MemoryStorage](xref:botbuilder-core.MemoryStorage) is designed primarily for testing with a single host
 * running the bot and no durable storage.
 *
 * The default Skills implementation can be constrained in terms of allowed callers through configuration.
 * Refer to the product documentation for further details.
 *
 * The default [BotTelemetryClient](xref:botbuilder-core.BotTelemetryClient) implementation uses AppInsights
 * and aspects of what is included in the telemetry data recorded can be controller through configuration.
 * Refer to the product documentation for further details.
 *
 * A number of the features of the runtime are implemented through middleware. Various feature flags in
 * configuration determine whether these middleware are added at runtime, the settings include:
 * UseInspection, ShowTyping and SetSpeak.
 *
 * These control the addition of:
 * [InspectionMiddleware](xref:botbuilder.InspectionMiddleware),
 * [ShowTypingMiddleware](xref:botbuilder-core.ShowTypingMiddleware), and
 * [SetSpeakMiddleware](xref:botbuilder.SetSpeakMiddleware) respectively.
 */
export declare function getRuntimeServices(applicationRoot: string, settingsDirectory: string): Promise<[ServiceCollection, Configuration]>;
/**
 * Construct all runtime services.
 *
 * @param applicationRoot absolute path to root of application
 * @param configuration a fully initialized configuration instance to use
 * @returns service collection and configuration
 */
export declare function getRuntimeServices(applicationRoot: string, configuration: Configuration): Promise<[ServiceCollection, Configuration]>;
export { Configuration };
//# sourceMappingURL=index.d.ts.map