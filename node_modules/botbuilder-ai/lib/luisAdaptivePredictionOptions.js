"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LuisAdaptivePredictionOptionsConverter = void 0;
const adaptive_expressions_1 = require("adaptive-expressions");
class LuisAdaptivePredictionOptionsConverter {
    constructor() {
        this.boolExpressionConverter = new adaptive_expressions_1.BoolExpressionConverter();
        this.stringExpressionConverter = new adaptive_expressions_1.StringExpressionConverter();
        this.arrayExpressionConverter = new adaptive_expressions_1.ArrayExpressionConverter();
    }
    convert(config) {
        var _a, _b, _c, _d, _e, _f;
        const options = Object.entries(config).reduce((options, [key, value]) => {
            switch (key) {
                case 'includeAllIntents':
                case 'includeInstanceData':
                case 'includeAPIResults':
                case 'log':
                case 'preferExternalEntities':
                    options[`${key}`] = this.boolExpressionConverter.convert(value);
                    break;
                case 'dateTimeReference':
                case 'slot':
                    options[`${key}`] = this.stringExpressionConverter.convert(value);
                    break;
                case 'externalEntities':
                    options[`${key}`] = this.arrayExpressionConverter.convert(value);
                    break;
            }
            return options;
        }, {});
        // Assign default values
        (_a = options.includeAllIntents) !== null && _a !== void 0 ? _a : (options.includeAllIntents = new adaptive_expressions_1.BoolExpression(false));
        (_b = options.includeInstanceData) !== null && _b !== void 0 ? _b : (options.includeInstanceData = new adaptive_expressions_1.BoolExpression(false));
        (_c = options.includeAPIResults) !== null && _c !== void 0 ? _c : (options.includeAPIResults = new adaptive_expressions_1.BoolExpression(false));
        (_d = options.log) !== null && _d !== void 0 ? _d : (options.log = new adaptive_expressions_1.BoolExpression(true));
        (_e = options.preferExternalEntities) !== null && _e !== void 0 ? _e : (options.preferExternalEntities = new adaptive_expressions_1.BoolExpression(true));
        (_f = options.slot) !== null && _f !== void 0 ? _f : (options.slot = new adaptive_expressions_1.StringExpression('production'));
        return options;
    }
}
exports.LuisAdaptivePredictionOptionsConverter = LuisAdaptivePredictionOptionsConverter;
//# sourceMappingURL=luisAdaptivePredictionOptions.js.map