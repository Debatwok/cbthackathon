"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequestUtils = void 0;
const os = __importStar(require("os"));
const globals_1 = require("../globals");
const fetch = globals_1.getFetch();
// eslint-disable-next-line @typescript-eslint/no-var-requires
const pjson = require('../../package.json');
/**
 * Http request utils class.
 *
 * @summary
 * This class is helper class for all the http request operations.
 */
class HttpRequestUtils {
    /**
     * Execute Http request.
     *
     * @param {string} requestUrl Http request url.
     * @param {string} payloadBody Http request body.
     * @param {QnAMakerEndpoint} endpoint QnA Maker endpoint details.
     * @param {number} timeout (Optional)Timeout for http call
     * @returns {QnAMakerResults} a promise that resolves to the QnAMakerResults
     */
    executeHttpRequest(requestUrl, payloadBody, endpoint, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!requestUrl) {
                throw new TypeError('Request url cannot be null.');
            }
            if (!payloadBody) {
                throw new TypeError('Payload body cannot be null.');
            }
            if (!endpoint) {
                throw new TypeError('Payload body cannot be null.');
            }
            const headers = this.getHeaders(endpoint);
            const qnaResult = yield fetch(requestUrl, {
                method: 'POST',
                headers: headers,
                timeout: timeout,
                body: payloadBody,
            });
            return qnaResult.status !== 204 ? yield qnaResult.json() : undefined;
        });
    }
    /**
     * Sets headers for request to QnAMaker service.
     *
     * The [QnAMakerEndpointKey](#QnAMakerEndpoint.QnAMakerEndpointKey) is set as the value of
     * `Authorization` header for v4.0 and later of QnAMaker service.
     *
     * Legacy QnAMaker services use the `Ocp-Apim-Subscription-Key` header for the QnAMakerEndpoint value instead.
     *
     * [QnAMaker.getHeaders()](#QnAMaker.getHeaders) also gets the User-Agent header value.
     *
     * @private
     */
    getHeaders(endpoint) {
        const headers = {};
        headers['Ocp-Apim-Subscription-Key'] = endpoint.endpointKey;
        headers['Authorization'] = `EndpointKey ${endpoint.endpointKey}`;
        headers['User-Agent'] = this.getUserAgent();
        headers['Content-Type'] = 'application/json';
        return headers;
    }
    getUserAgent() {
        const packageUserAgent = `${pjson.name}/${pjson.version}`;
        const platformUserAgent = `(${os.arch()}-${os.type()}-${os.release()}; Node.js,Version=${process.version})`;
        return `${packageUserAgent} ${platformUserAgent}`;
    }
}
exports.HttpRequestUtils = HttpRequestUtils;
//# sourceMappingURL=httpRequestUtils.js.map