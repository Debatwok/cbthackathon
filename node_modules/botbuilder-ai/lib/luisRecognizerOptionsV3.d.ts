/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { LuisApplication, LuisRecognizerOptionsV3 } from './luisRecognizer';
import { LuisRecognizerInternal } from './luisRecognizerOptions';
import { TurnContext, RecognizerResult } from 'botbuilder-core';
import { DialogContext } from 'botbuilder-dialogs';
/**
 * Validates if the options provided are valid [LuisRecognizerOptionsV3](xref:botbuilder-ai.LuisRecognizerOptionsV3).
 *
 * @param {any} options options to type test
 * @returns {boolean} A boolean value that indicates param options is a [LuisRecognizerOptionsV3](xref:botbuilder-ai.LuisRecognizerOptionsV3).
 */
export declare function isLuisRecognizerOptionsV3(options: unknown): options is LuisRecognizerOptionsV3;
/**
 * Recognize intents in a user utterance using a configured LUIS model.
 */
export declare class LuisRecognizerV3 extends LuisRecognizerInternal {
    /**
     * Creates a new [LuisRecognizerV3](xref:botbuilder-ai.LuisRecognizerV3) instance.
     *
     * @param {LuisApplication} application An object conforming to the [LuisApplication](xref:botbuilder-ai.LuisApplication) definition or a string representing a LUIS application endpoint, usually retrieved from https://luis.ai.
     * @param {LuisRecognizerOptionsV3} options Optional. Options object used to control predictions. Should conform to the [LuisRecognizerOptionsV3](xref:botbuilder-ai.LuisRecognizerOptionsV3) definition.
     */
    constructor(application: LuisApplication, options?: LuisRecognizerOptionsV3);
    predictionOptions: LuisRecognizerOptionsV3;
    /**
     * Calls LUIS to recognize intents and entities in a users utterance.
     *
     * @param {TurnContext} context The [TurnContext](xref:botbuilder-core.TurnContext).
     * @returns {Promise<RecognizerResult>} Analysis of utterance in form of [RecognizerResult](xref:botbuilder-core.RecognizerResult).
     */
    recognizeInternal(context: DialogContext | TurnContext): Promise<RecognizerResult>;
    /**
     * Calls LUIS to recognize intents and entities in a users utterance.
     *
     * @param {string} utterance The utterance to be recognized.
     */
    recognizeInternal(utterance: string): Promise<RecognizerResult>;
    private recognize;
    private buildUrl;
    private buildRequestBody;
    private emitTraceInfo;
}
//# sourceMappingURL=luisRecognizerOptionsV3.d.ts.map