/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ArrayExpression, BoolExpression, Expression, StringExpression } from 'adaptive-expressions';
import { Converter } from 'botbuilder-dialogs';
import { ExternalEntity } from './externalEntity';
export interface LuisAdaptivePredictionOptionsConfiguration {
    /**
     * Gets or sets a value indicating whether all intents come back or only the top one.
     */
    includeAllIntents?: boolean | string | Expression | BoolExpression;
    /**
     * Gets or sets a value indicating whether or not instance data should be included in response.
     */
    includeInstanceData?: boolean | string | Expression | BoolExpression;
    /**
     * Gets or sets a value indicating whether API results should be included.
     */
    includeAPIResults?: boolean | string | Expression | BoolExpression;
    /**
     * Gets or sets a value indicating whether queries should be logged in LUIS.
     */
    log?: boolean | string | Expression | BoolExpression;
    /**
     * Gets or sets external entities recognized in the query.
     */
    externalEntities?: ExternalEntity[] | string | Expression | ArrayExpression<ExternalEntity>;
    /**
     * Gets or sets a value indicating whether external entities should override other means of recognizing entities.
     */
    preferExternalEntities?: boolean | string | Expression | BoolExpression;
    /**
     * Gets or sets datetimeV2 offset. The format for the datetimeReference is ISO 8601.
     */
    dateTimeReference?: string | Expression | StringExpression;
    /**
     * Gets or sets the LUIS slot to use for the application.
     */
    slot?: string | Expression | StringExpression;
}
export declare class LuisAdaptivePredictionOptionsConverter implements Converter<LuisAdaptivePredictionOptionsConfiguration, LuisAdaptivePredictionOptions> {
    convert(config: LuisAdaptivePredictionOptionsConfiguration): LuisAdaptivePredictionOptions;
    private boolExpressionConverter;
    private stringExpressionConverter;
    private arrayExpressionConverter;
}
/**
 * Optional parameters for a LUIS prediction request.
 */
export interface LuisAdaptivePredictionOptions {
    /**
     * Gets or sets a value indicating whether all intents come back or only the top one.
     */
    includeAllIntents?: BoolExpression;
    /**
     * Gets or sets a value indicating whether or not instance data should be included in response.
     */
    includeInstanceData?: BoolExpression;
    /**
     * Gets or sets a value indicating whether API results should be included.
     */
    includeAPIResults?: BoolExpression;
    /**
     * Gets or sets a value indicating whether queries should be logged in LUIS.
     */
    log?: BoolExpression;
    /**
     * Gets or sets external entities recognized in the query.
     */
    externalEntities?: ArrayExpression<ExternalEntity>;
    /**
     * Gets or sets a value indicating whether external entities should override other means of recognizing entities.
     */
    preferExternalEntities?: BoolExpression;
    /**
     * Gets or sets datetimeV2 offset. The format for the datetimeReference is ISO 8601.
     */
    dateTimeReference?: StringExpression;
    /**
     * Gets or sets the LUIS slot to use for the application.
     */
    slot?: StringExpression;
}
//# sourceMappingURL=luisAdaptivePredictionOptions.d.ts.map
