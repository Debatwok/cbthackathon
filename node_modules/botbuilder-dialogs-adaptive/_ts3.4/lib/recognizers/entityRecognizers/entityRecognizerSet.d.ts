/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Entity } from 'botbuilder';
import { DialogContext } from 'botbuilder-dialogs';
import { EntityRecognizer } from './entityRecognizer';
/**
 * EntityRecognizerSet - Implements a workflow against a pool of [EntityRecognizer](xref:botbuilder-dialogs-adaptive.EntityRecognizer) instances, iterating until nobody has anything new to add.
 */
export declare class EntityRecognizerSet extends Array<EntityRecognizer> {
    static $kind: string;
    /**
     * Implement [EntityRecognizer.recognizeEntities](xref:botbuilder-dialogs-adaptive.EntityRecognizer.recognizeEntities) by iterating against the Recognizer pool.
     * @param dialogContext [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param text Text to recognize.
     * @param locale Locale to use.
     * @param entities The [Entity](xref:botframework-schema.Entity) array to be recognized. If no entities are passed in, it will generate a [TextEntity](xref:botbuilder-dialogs-adaptive.TextEntity).
     * @returns Recognized [Entity](xref:botframework-schema.Entity) list Promise.
     */
    recognizeEntities(dialogContext: DialogContext, text: string, locale: string, entities?: Entity[]): Promise<Entity[]>;
}
//# sourceMappingURL=entityRecognizerSet.d.ts.map
