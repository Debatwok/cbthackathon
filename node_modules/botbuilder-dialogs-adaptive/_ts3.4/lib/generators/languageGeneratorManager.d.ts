/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Class which manages cache of all LG resources from a ResourceExplorer.
 * This class automatically updates the cache when resource change events occure.
 */
import { Resource, ResourceExplorer } from 'botbuilder-dialogs-declarative';
import { ImportResolverDelegate } from 'botbuilder-lg';
import { LanguageGenerator } from '../languageGenerator';
/**
 * Class which manages cache of all LG resources from a [ResourceExplorer](xref:botbuilder-dialogs-declarative.ResourceExplorer).
 */
export declare class LanguageGeneratorManager<T = unknown, D extends Record<string, unknown> = Record<string, unknown>> {
    /**
     * Resource explorer to manager LG files used by language generator manager.
     */
    private _resourceExporer;
    /**
     * Multi language lg resources. en -> [resourcelist].
     */
    private _multiLanguageResources;
    /**
     * Initialize a new instance of [LanguageResourceManager](xref:botbuilder-dialogs-adaptive.LanguageResourceManager) class.
     * @param resourceManager Resource explorer to manager LG files.
     */
    constructor(resourceManager: ResourceExplorer);
    /**
     * Gets or sets language generators.
     */
    languageGenerators: Map<string, LanguageGenerator<T, D>>;
    /**
     * Returns the resolver to resolve LG import id to template text based on language and a template resource loader delegate.
     * @param locale Locale to identify language.
     * @param resourceMapping Template resource loader delegate.
     * @returns The delegate to resolve the resource.
     */
    static resourceExplorerResolver(locale: string, resourceMapping: Map<string, Resource[]>): ImportResolverDelegate;
    /**
     * @private
     */
    private getTemplateEngineLanguageGenerator;
}
//# sourceMappingURL=languageGeneratorManager.d.ts.map
