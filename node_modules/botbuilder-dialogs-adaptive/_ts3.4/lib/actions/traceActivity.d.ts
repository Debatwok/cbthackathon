import { BoolProperty, StringProperty, UnknownProperty } from '../properties';
import { BoolExpression, StringExpression, ValueExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface TraceActivityConfiguration extends DialogConfiguration {
    name?: StringProperty;
    valueType?: StringProperty;
    value?: UnknownProperty;
    label?: StringProperty;
    disabled?: BoolProperty;
}
/**
 * Send an trace activity back to the transcript.
 */
export declare class TraceActivity<O extends object = {}> extends Dialog<O> implements TraceActivityConfiguration {
    static $kind: string;
    constructor();
    /**
     * Initializes a new instance of the [TraceActivity](xref:botbuilder-dialogs-adaptive.TraceActivity) class.
     * @param name Name of the trace activity.
     * @param valueType Value type of the trace activity.
     * @param value Value expression to send as the value.
     * @param label Label to use when describing a trace activity.
     */
    constructor(name: string, valueType: string, value: any, label: string);
    /**
     * Gets or sets name of the trace activity.
     */
    name?: StringExpression;
    /**
     * Gets or sets value type of the trace activity.
     */
    valueType?: StringExpression;
    /**
     * Gets or sets value expression to send as the value.
     */
    value?: ValueExpression;
    /**
     * Gets or sets a label to use when describing a trace activity.
     */
    label?: StringExpression;
    /**
     * An optional expression which if is true will disable this action.
     */
    disabled?: BoolExpression;
    getConverter(property: keyof TraceActivityConfiguration): Converter | ConverterFactory;
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, options?: O): Promise<DialogTurnResult>;
    /**
     * @protected
     * Builds the compute Id for the [Dialog](xref:botbuilder-dialogs.Dialog).
     * @returns A `string` representing the compute Id.
     */
    protected onComputeId(): string;
}
//# sourceMappingURL=traceActivity.d.ts.map
