/**
 * @module botbuilder-dialogs-adaptive
 */
import { ResourceResponse, Transcript } from 'botbuilder';
import { ObjectExpression } from 'adaptive-expressions';
import { ObjectProperty } from '../properties';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface SendHandoffActivityConfiguration extends DialogConfiguration {
    context?: ObjectProperty<Record<string, unknown>>;
    transcript?: ObjectProperty<Transcript>;
}
/**
 * Sends a handoff activity. Note that this is a single turn/step dialog (i.e. it calls
 * this.endDialog).
 */
export declare class SendHandoffActivity extends Dialog implements SendHandoffActivityConfiguration {
    static $kind: string;
    /**
     * Context to send with handoff activity
     */
    context: ObjectExpression<Record<string, unknown>>;
    /**
     * Transcript to send with handoff activity
     */
    transcript: ObjectExpression<Transcript>;
    getConverter(property: keyof SendHandoffActivityConfiguration): Converter | ConverterFactory;
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     *
     * @param {DialogContext} dc dialog context
     * @returns {Promise<DialogTurnResult<ResourceResponse>>} result of sending handoff activity
     */
    beginDialog(dc: DialogContext): Promise<DialogTurnResult<ResourceResponse>>;
}
//# sourceMappingURL=sendHandoffActivity.d.ts.map
