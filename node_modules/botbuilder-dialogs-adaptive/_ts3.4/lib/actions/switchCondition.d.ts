import { ActionScope } from './actionScope';
import { Case } from './case';
import { BoolExpression, Expression } from 'adaptive-expressions';
import { BoolProperty, Property } from '../properties';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogDependencies, DialogTurnResult } from 'botbuilder-dialogs';
declare type CaseInput = {
    actions: Dialog[];
    value: string;
};
/**
 * Conditional branch with multiple cases.
 */
export interface SwitchConditionConfiguration extends DialogConfiguration {
    condition?: Property;
    default?: string[] | Dialog[];
    cases?: CaseInput[] | Case[];
    disabled?: BoolProperty;
}
export declare class SwitchCondition<O extends object = {}> extends Dialog<O> implements DialogDependencies, SwitchConditionConfiguration {
    static $kind: string;
    constructor();
    /**
     * Initializes a new instance of the [SwitchCondition](xref:botbuilder-dialogs-adaptive.SwitchCondition) class
     * @param condition Condition expression against memory.
     * @param defaultDialogs Default [Dialog](xref:botbuilder-dialogs.Dialog) array.
     * @param cases Cases.
     */
    constructor(condition: string, defaultDialogs: Dialog[], cases: Case[]);
    /**
     * Condition expression against memory.
     */
    condition: Expression;
    /**
     * Default case.
     */
    default: Dialog[];
    /**
     * Cases.
     */
    cases: Case[];
    /**
     * An optional expression which if is true will disable this action.
     */
    disabled?: BoolExpression;
    getConverter(property: keyof SwitchConditionConfiguration): Converter | ConverterFactory;
    private _caseExpresssions;
    private _defaultScope;
    /**
     * Gets the child [Dialog](xref:botbuilder-dialogs.Dialog) dependencies so they can be added to the containers [Dialog](xref:botbuilder-dialogs.Dialog) set.
     * @returns The child [Dialog](xref:botbuilder-dialogs.Dialog) dependencies.
     */
    getDependencies(): Dialog[];
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, options?: O): Promise<DialogTurnResult>;
    /*
    * @protected
    * Gets the default scope.
    * @returns An [ActionScope](xref:botbuilder-dialogs-adaptive.ActionScope) with the scope.
    */
    protected readonly defaultScope: ActionScope;
    /**
     * @protected
     * Builds the compute Id for the [Dialog](xref:botbuilder-dialogs.Dialog).
     * @returns A `string` representing the compute Id.
     */
    protected onComputeId(): string;
}
export {};
//# sourceMappingURL=switchCondition.d.ts.map
