/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { BoolProperty, ObjectProperty, UnknownProperty } from '../properties';
import { BoolExpression, ObjectExpression, ValueExpression } from 'adaptive-expressions';
import { ConversationReference } from 'botbuilder';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface ContinueConversationConfiguration extends DialogConfiguration {
    disabled?: BoolProperty;
    conversationReference?: ObjectProperty<ConversationReference>;
    value?: UnknownProperty;
}
/**
 * Action which continues a conversation using a Conversation reference.
 */
export declare class ContinueConversation extends Dialog implements ContinueConversationConfiguration {
    static $kind: string;
    /**
     * Gets or sets an optional expression which if true will disable this action.
     */
    disabled: BoolExpression;
    /**
     * Gets or sets the conversationReference for the target conversation.
     */
    conversationReference: ObjectExpression<ConversationReference>;
    /**
     * Gets or sets an optional value to use for EventActivity.Value.
     */
    value: ValueExpression;
    getConverter(property: keyof ContinueConversationConfiguration): Converter | ConverterFactory;
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {Record<string, ?>} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, _options?: Record<string, unknown>): Promise<DialogTurnResult>;
    /**
     * Builds the compute id for the dialog.
     *
     * @returns {string} A string representing the compute id.
     */
    protected onComputeId(): string;
}
//# sourceMappingURL=continueConversation.d.ts.map
