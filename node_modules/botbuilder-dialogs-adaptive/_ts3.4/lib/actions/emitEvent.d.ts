/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { BoolProperty, StringProperty, UnknownProperty } from '../properties';
import { BoolExpression, StringExpression, ValueExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface EmitEventConfiguration extends DialogConfiguration {
    eventName?: StringProperty;
    eventValue?: UnknownProperty;
    bubbleEvent?: BoolProperty;
    handledProperty?: StringProperty;
    disabled?: BoolProperty;
}
/**
 * Action which emits an event declaratively.
 */
export declare class EmitEvent<O extends object = {}> extends Dialog<O> implements EmitEventConfiguration {
    static $kind: string;
    constructor();
    /**
     * Initializes a new instance of the [EmitEvent](xref:botbuilder-dialogs-adaptive.EmitEvent) class.
     * @param eventName Name of the event to emit.
     * @param eventValue Optional. Memory property path to use to get the value to send as part of the event.
     * @param bubbleEvent Default = `false`. Value indicating whether the event should bubble to parents or not.
     */
    constructor(eventName: string, eventValue?: string, bubbleEvent?: boolean);
    /**
     * The name of the event to emit.
     */
    eventName: StringExpression;
    /**
     * The memory property path to use to get the value to send as part of the event.
     */
    eventValue: ValueExpression;
    /**
     * A value indicating whether gets or sets whether the event should bubble or not.
     */
    bubbleEvent: BoolExpression;
    /**
     * The property path to store whether the event was handled or not.
     */
    handledProperty: StringExpression;
    /**
     * An optional expression which if is true will disable this action.
     */
    disabled?: BoolExpression;
    getConverter(property: keyof EmitEventConfiguration): Converter | ConverterFactory;
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, options?: O): Promise<DialogTurnResult>;
    /**
     * @protected
     * Builds the compute Id for the [Dialog](xref:botbuilder-dialogs.Dialog).
     * @returns A `string` representing the compute Id.
     */
    protected onComputeId(): string;
}
//# sourceMappingURL=emitEvent.d.ts.map
