import { BoolExpression } from 'adaptive-expressions';
import { BoolProperty } from '../properties';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface EndTurnConfiguration extends DialogConfiguration {
    disabled?: BoolProperty;
}
/**
 * This command ends the current turn without ending the [Dialog](xref:botbuilder-dialogs.Dialog).
 */
export declare class EndTurn<O extends object = {}> extends Dialog<O> implements EndTurnConfiguration {
    static $kind: string;
    /**
     * An optional expression which if is true will disable this action.
     */
    disabled?: BoolExpression;
    getConverter(property: keyof EndTurnConfiguration): Converter | ConverterFactory;
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, options?: O): Promise<DialogTurnResult>;
    /**
     * Called when the [Dialog](xref:botbuilder-dialogs.Dialog) is _continued_, where it is the active dialog and the
     * user replies with a new activity.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @returns A `Promise` representing the asynchronous operation.
     */
    continueDialog(dc: DialogContext): Promise<DialogTurnResult>;
    /**
     * @protected
     * Builds the compute Id for the [Dialog](xref:botbuilder-dialogs.Dialog).
     * @returns A `string` representing the compute Id.
     */
    protected onComputeId(): string;
}
//# sourceMappingURL=endTurn.d.ts.map
