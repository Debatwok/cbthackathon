import { BoolProperty, StringProperty } from '../properties';
import { BoolExpression, StringExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, DialogConfiguration, DialogContext, Dialog, DialogStateManager, DialogTurnResult, TemplateInterface } from 'botbuilder-dialogs';
export interface LogActionConfiguration extends DialogConfiguration {
    text?: string | TemplateInterface<string, DialogStateManager>;
    traceActivity?: BoolProperty;
    label?: StringProperty;
    disabled?: BoolProperty;
}
/**
 * Write entry into application trace logs.
 */
export declare class LogAction<O extends object = {}> extends Dialog<O> implements LogActionConfiguration {
    static $kind: string;
    /**
     * Creates a new [LogAction](xref:botbuilder-dialogs-adaptive.LogAction) instance.
     * @param template The text template to log.
     */
    constructor(text: string);
    /**
     * The text template to log.
     */
    text: TemplateInterface<string, DialogStateManager>;
    /**
     * If true, the message will both be logged to the console and sent as a trace activity.
     * Defaults to a value of false.
     */
    traceActivity: BoolExpression;
    /**
     * A label to use when describing a trace activity.
     */
    label: StringExpression;
    /**
     * An optional expression which if is true will disable this action.
     */
    disabled?: BoolExpression;
    getConverter(property: keyof LogActionConfiguration): Converter | ConverterFactory;
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, options?: O): Promise<DialogTurnResult>;
    /**
     * @protected
     * Builds the compute Id for the [Dialog](xref:botbuilder-dialogs.Dialog).
     * @returns A `string` representing the compute Id.
     */
    protected onComputeId(): string;
}
//# sourceMappingURL=logAction.d.ts.map
