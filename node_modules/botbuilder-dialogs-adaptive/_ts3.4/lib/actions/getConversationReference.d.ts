/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { BoolProperty, StringProperty } from '../properties';
import { BoolExpression, StringExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface GetConversationReferenceConfiguration extends DialogConfiguration {
    property?: StringProperty;
    disabled?: BoolProperty;
}
/**
 * Gets the current conversation reference and saves it to a memory property suitable to use in ContinueConversation action.
 */
export declare class GetConversationReference extends Dialog implements GetConversationReferenceConfiguration {
    static $kind: string;
    /**
     * Gets or sets an optional expression which if true will disable this action.
     */
    disabled: BoolExpression;
    /**
     * Gets or sets property path to put the value in.
     */
    property: StringExpression;
    getConverter(property: keyof GetConversationReferenceConfiguration): Converter | ConverterFactory;
    /**
     * Called when the dialog is started and pushed onto the dialog stack.
     *
     * @param {DialogContext} dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param {Record<string, ?>} _options Optional, initial information to pass to the dialog.
     * @returns {Promise<DialogTurnResult>} A promise representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, _options?: Record<string, unknown>): Promise<DialogTurnResult>;
    /**
     * Builds the compute id for the dialog.
     *
     * @returns {string} A string representing the compute id.
     */
    protected onComputeId(): string;
}
//# sourceMappingURL=getConversationReference.d.ts.map
