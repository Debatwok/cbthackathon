/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Configurable, DialogContext } from 'botbuilder-dialogs';
import { Resource } from 'botbuilder-dialogs-declarative';
import { Templates } from 'botbuilder-lg';
import { LanguageGenerator } from '../languageGenerator';
export interface TemplateEngineLanguageGeneratorConfiguration {
    id?: string;
}
/**
 * [LanguageGenerator](xref:botbuilder-dialogs-adaptive.LanguageGenerator) implementation which uses LGFile.
 */
export declare class TemplateEngineLanguageGenerator<T = unknown, D extends Record<string, unknown> = Record<string, unknown>> extends Configurable implements LanguageGenerator<T, D>, TemplateEngineLanguageGeneratorConfiguration {
    static $kind: string;
    private readonly DEFAULTLABEL;
    private lg;
    id: string;
    /**
     * Initializes a new instance of the [TemplateEngineLanguageGenerator](xref:botbuilder-dialogs-adaptive.TemplateEngineLanguageGenerator) class.
     * @param arg1 Optional. An LG [Templates](xref:botbuilder-lg.Templates) or a [Resource](xref:botbuilder-dialogs-declarative.Resource).
     * @param arg2 Optional. A `Map` object with a `Resource` array for each key.
     */
    constructor(arg1?: Templates | Resource, arg2?: Map<string, Resource[]>);
    /**
     * Method to generate text from given template and data.
     * @param dialogContext Context for the current turn of conversation.
     * @param template Template to evaluate.
     * @param data Data to bind to.
     * @returns A Promise string with the evaluated result.
     */
    generate(dialogContext: DialogContext, template: string, data: D): Promise<T>;
}
//# sourceMappingURL=templateEngineLanguageGenerator.d.ts.map