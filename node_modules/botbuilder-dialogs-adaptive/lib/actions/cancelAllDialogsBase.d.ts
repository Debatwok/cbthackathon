/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { BoolProperty, StringProperty, UnknownProperty } from '../properties';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
import { BoolExpression, StringExpression, ValueExpression } from 'adaptive-expressions';
export interface CancelAllDialogsBaseConfiguration extends DialogConfiguration {
    eventName?: StringProperty;
    eventValue?: UnknownProperty;
    disabled?: BoolProperty;
    activityProcessed?: BoolProperty;
}
/**
 * Base class for [CancelAllDialogs](xref:botbuilder-dialogs-adaptive.CancelAllDialogs) api.
 */
export declare class CancelAllDialogsBase<O extends object = {}> extends Dialog<O> implements CancelAllDialogsBaseConfiguration {
    constructor();
    /**
     * Initializes a new instance of the [CancelAllDialogsBase](xref:botbuilder-dialogs-adaptive.CancelAllDialogsBase) class.
     * @param eventName Expression for event name.
     * @param eventValue Optional. Expression for event value.
     * @param isCancelAll Set to `true` to cancel all dialogs; `false` otherwise.
     */
    constructor(eventName: string, eventValue?: string, isCancelAll?: boolean);
    /**
     * Expression for event name.
     */
    eventName: StringExpression;
    /**
     * Expression for event value.
     */
    eventValue: ValueExpression;
    /**
     * An optional expression which if is true will disable this action.
     */
    disabled: BoolExpression;
    /**
     * A value indicating whether to have the new dialog should process the activity.
     */
    activityProcessed: BoolExpression;
    private _cancelAll;
    getConverter(property: keyof CancelAllDialogsBaseConfiguration): Converter | ConverterFactory;
    /**
     * Called when the [Dialog](xref:botbuilder-dialogs.Dialog) is started and pushed onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, options: O): Promise<DialogTurnResult>;
    /**
     * @protected
     * Builds the compute Id for the [Dialog](xref:botbuilder-dialogs.Dialog).
     * @returns A `string` representing the compute Id.
     */
    protected onComputeId(): string;
}
//# sourceMappingURL=cancelAllDialogsBase.d.ts.map