import { BoolProperty, StringProperty } from '../properties';
import { BoolExpression, StringExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
export interface GetConversationMembersConfiguration extends DialogConfiguration {
    property?: StringProperty;
    disabled?: BoolProperty;
}
/**
 * Calls `BotFrameworkAdapter.getConversationMembers()` and sets the result to a memory property.
 */
export declare class GetConversationMembers<O extends object = {}> extends Dialog<O> implements GetConversationMembersConfiguration {
    static $kind: string;
    constructor();
    /**
     * Property path to put the value in.
     */
    property: StringExpression;
    /**
     * An optional expression which if is true will disable this action.
     */
    disabled?: BoolExpression;
    getConverter(property: keyof GetConversationMembersConfiguration): Converter | ConverterFactory;
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, options?: O): Promise<DialogTurnResult>;
    /**
     * @protected
     * Builds the compute Id for the [Dialog](xref:botbuilder-dialogs.Dialog).
     * @returns A `string` representing the compute Id.
     */
    protected onComputeId(): string;
}
//# sourceMappingURL=getConversationMembers.d.ts.map