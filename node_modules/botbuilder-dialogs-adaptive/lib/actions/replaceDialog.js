"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplaceDialog = void 0;
/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const baseInvokeDialog_1 = require("./baseInvokeDialog");
const adaptive_expressions_1 = require("adaptive-expressions");
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
/**
 * Action which calls another [Dialog](xref:botbuilder-dialogs.Dialog), when it is done it will go to the caller's parent dialog.
 */
class ReplaceDialog extends baseInvokeDialog_1.BaseInvokeDialog {
    /**
     * Creates a new [ReplaceDialog](xref:botbuilder-dialogs-adaptive.ReplaceDialog) instance.
     * @param dialogId Optional. ID of the [Dialog](xref:botbuilder-dialogs.Dialog) to goto.
     * @param options Optional. Static options to pass the [Dialog](xref:botbuilder-dialogs.Dialog).
     */
    constructor(dialogIdToCall, options) {
        super(dialogIdToCall, options);
    }
    getConverter(property) {
        switch (property) {
            case 'disabled':
                return new adaptive_expressions_1.BoolExpressionConverter();
            default:
                return super.getConverter(property);
        }
    }
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.disabled && this.disabled.getValue(dc.state)) {
                return dc.endDialog();
            }
            const dialog = this.resolveDialog(dc);
            const boundOptions = this.bindOptions(dc, options);
            // set the activity processed state (default is true)
            dc.state.setValue(botbuilder_dialogs_1.TurnPath.activityProcessed, this.activityProcessed.getValue(dc.state));
            return dc.parent.replaceDialog(dialog.id, boundOptions);
        });
    }
}
exports.ReplaceDialog = ReplaceDialog;
ReplaceDialog.$kind = 'Microsoft.ReplaceDialog';
//# sourceMappingURL=replaceDialog.js.map