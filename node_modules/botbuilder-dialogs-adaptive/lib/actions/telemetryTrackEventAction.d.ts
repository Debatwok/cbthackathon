/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { BoolProperty, StringProperty } from '../properties';
import { BoolExpression, StringExpression } from 'adaptive-expressions';
import { Converter, ConverterFactory, Dialog, DialogConfiguration, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';
declare type PropertiesInput = Record<string, string>;
declare type PropertiesOutput = Record<string, StringExpression>;
export interface TelemetryTrackEventActionConfiguration extends DialogConfiguration {
    disabled?: BoolProperty;
    eventName?: StringProperty;
    properties?: PropertiesInput | PropertiesOutput;
}
/**
 * Track a custom event.
 */
export declare class TelemetryTrackEventAction<O extends object = {}> extends Dialog implements TelemetryTrackEventActionConfiguration {
    static $kind: string;
    /**
     * Initializes a new instance of the [TelemetryTrackEventAction](xref:botbuilder-dialogs-adaptive.TelemetryTrackEventAction) class.
     * @param eventName Name to use for the event.
     * @param properties Properties to attach to the tracked event.
     */
    constructor(eventName: string, properties: {
        [name: string]: string;
    });
    /**
     * Gets or sets an optional expression which if is true will disable this action.
     */
    disabled: BoolExpression;
    /**
     * Gets or sets a name to use for the event.
     */
    eventName: StringExpression;
    /**
     * Gets or sets the properties to attach to the tracked event.
     */
    properties: {
        [name: string]: StringExpression;
    };
    getConverter(property: keyof TelemetryTrackEventActionConfiguration): Converter | ConverterFactory;
    /**
     * Starts a new [Dialog](xref:botbuilder-dialogs.Dialog) and pushes it onto the dialog stack.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param options Optional. Initial information to pass to the dialog.
     * @returns A `Promise` representing the asynchronous operation.
     */
    beginDialog(dc: DialogContext, options?: O): Promise<DialogTurnResult>;
    /**
     * @protected
     * Builds the compute Id for the [Dialog](xref:botbuilder-dialogs.Dialog).
     * @returns A `string` representing the compute Id.
     */
    protected onComputeId(): string;
}
export {};
//# sourceMappingURL=telemetryTrackEventAction.d.ts.map