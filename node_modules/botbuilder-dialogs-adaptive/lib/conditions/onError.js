"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnError = void 0;
const onDialogEvent_1 = require("./onDialogEvent");
const adaptiveEvents_1 = require("../adaptiveEvents");
const actionChangeType_1 = require("../actionChangeType");
/**
 * Actions triggered when an error event has been emitted.
 */
class OnError extends onDialogEvent_1.OnDialogEvent {
    /**
     * Initializes a new instance of the [OnError](xref:botbuilder-dialogs-adaptive.OnError) class.
     * @param actions Optional. A [Dialog](xref:botbuilder-dialogs.Dialog) list containing the actions to add to the plan when the rule constraints are met.
     * @param condition Optional. Condition which needs to be met for the actions to be executed.
     */
    constructor(actions = [], condition) {
        super(adaptiveEvents_1.AdaptiveEvents.error, actions, condition);
    }
    /**
     * Called when a change list is created.
     * @param actionContext [ActionContext](xref:botbuilder-dialogs-adaptive.ActionContext) to use for evaluation.
     * @param dialogOptions Optional. Object with dialog options.
     * @returns An [ActionChangeList](xref:botbuilder-dialogs-adaptive.ActionChangeList) with the list of actions.
     */
    onCreateChangeList(actionContext, dialogOptions) {
        const changeList = super.onCreateChangeList(actionContext, dialogOptions);
        // For OnError handling we want to replace the old plan with whatever the error plan is,
        // since the old plan blew up.
        changeList.changeType = actionChangeType_1.ActionChangeType.replaceSequence;
        return changeList;
    }
}
exports.OnError = OnError;
OnError.$kind = 'Microsoft.OnError';
//# sourceMappingURL=onError.js.map