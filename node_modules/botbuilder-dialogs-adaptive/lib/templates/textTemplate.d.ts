/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Converter, ConverterFactory, Configurable, DialogContext, TemplateInterface } from 'botbuilder-dialogs';
export interface TextTemplateConfiguration {
    template?: string;
}
/**
 * Defines a text template where the template expression is local aka "inline"
 * and processed through registered language generator.
 */
export declare class TextTemplate<D = Record<string, unknown>> implements TemplateInterface<string, D>, TextTemplateConfiguration, Configurable {
    static $kind: string;
    /**
     * Initialize a new instance of TextTemplate class.
     * @param template The template to evaluate to create text.
     */
    constructor(template?: string);
    /**
     * Gets or sets the template to evaluate to create the text.
     */
    template: string;
    getConverter(_property: keyof TextTemplateConfiguration): Converter | ConverterFactory;
    configure(config: TextTemplateConfiguration): this;
    /**
     * Bind data to template.
     * @param dialogContext DialogContext.
     * @param data Data to bind to.
     */
    bind(dialogContext: DialogContext, data: D): Promise<string>;
    toString: () => string;
}
//# sourceMappingURL=textTemplate.d.ts.map