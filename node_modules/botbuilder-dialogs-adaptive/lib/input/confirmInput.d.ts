/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity } from 'botbuilder';
import { ChoiceSet } from './choiceSet';
import { EnumProperty, ObjectProperty, StringProperty } from '../properties';
import { InputDialog, InputDialogConfiguration, InputState } from './inputDialog';
import { EnumExpression, ObjectExpression, StringExpression } from 'adaptive-expressions';
import { ChoiceFactoryOptions, Converter, ConverterFactory, DialogContext, ListStyle } from 'botbuilder-dialogs';
export interface ConfirmInputConfiguration extends InputDialogConfiguration {
    defaultLocale?: StringProperty;
    style?: EnumProperty<ListStyle>;
    choiceOptions?: ObjectProperty<ChoiceFactoryOptions>;
    confirmChoices?: ObjectProperty<ChoiceSet>;
    outputFormat?: StringProperty;
}
/**
 * Declarative input control that will gather yes/no confirmation input from a set of choices.
 */
export declare class ConfirmInput extends InputDialog implements ConfirmInputConfiguration {
    static $kind: string;
    /**
     * Default options for rendering the choices to the user based on locale.
     */
    private static defaultChoiceOptions;
    /**
     * The prompts default locale that should be recognized.
     */
    defaultLocale?: StringExpression;
    /**
     * Style of the "yes" and "no" choices rendered to the user when prompting.
     *
     * @remarks
     * Defaults to `ListStyle.auto`.
     */
    style: EnumExpression<ListStyle>;
    /**
     * Additional options passed to the `ChoiceFactory` and used to tweak the style of choices
     * rendered to the user.
     */
    choiceOptions?: ObjectExpression<ChoiceFactoryOptions>;
    /**
     * Custom list of choices to send for the prompt.
     */
    confirmChoices?: ObjectExpression<ChoiceSet>;
    /**
     * The expression of output format.
     */
    outputFormat: StringExpression;
    getConverter(property: keyof ConfirmInputConfiguration): Converter | ConverterFactory;
    /**
     * @protected
     */
    protected onComputeId(): string;
    /**
     * @protected
     * Called when input has been received.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @returns [InputState](xref:botbuilder-dialogs-adaptive.InputState) which reflects whether input was recognized as valid or not.
     */
    protected onRecognizeInput(dc: DialogContext): Promise<InputState>;
    /**
     * @protected
     * Method which renders the prompt to the user given the current input state.
     * @param dc The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param state Dialog [InputState](xref:botbuilder-dialogs-adaptive.InputState).
     * @returns An [Activity](xref:botframework-schema.Activity) `Promise` representing the asynchronous operation.
     */
    protected onRenderPrompt(dc: DialogContext, state: InputState): Promise<Partial<Activity>>;
    private determineCulture;
    private getConfirmChoices;
}
//# sourceMappingURL=confirmInput.d.ts.map