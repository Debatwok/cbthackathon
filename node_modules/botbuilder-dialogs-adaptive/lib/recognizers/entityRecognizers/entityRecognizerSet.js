"use strict";
/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityRecognizerSet = void 0;
const textEntity_1 = require("./textEntity");
/**
 * EntityRecognizerSet - Implements a workflow against a pool of [EntityRecognizer](xref:botbuilder-dialogs-adaptive.EntityRecognizer) instances, iterating until nobody has anything new to add.
 */
class EntityRecognizerSet extends Array {
    /**
     * Implement [EntityRecognizer.recognizeEntities](xref:botbuilder-dialogs-adaptive.EntityRecognizer.recognizeEntities) by iterating against the Recognizer pool.
     * @param dialogContext [DialogContext](xref:botbuilder-dialogs.DialogContext) for the current turn of conversation.
     * @param text Text to recognize.
     * @param locale Locale to use.
     * @param entities The [Entity](xref:botframework-schema.Entity) array to be recognized. If no entities are passed in, it will generate a [TextEntity](xref:botbuilder-dialogs-adaptive.TextEntity).
     * @returns Recognized [Entity](xref:botframework-schema.Entity) list Promise.
     */
    recognizeEntities(dialogContext, text, locale, entities = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const allNewEntities = [];
            let entitiesToProcess = [...entities];
            if (entitiesToProcess.length == 0) {
                const textEntity = new textEntity_1.TextEntity(text);
                textEntity['start'] = 0;
                textEntity['end'] = text.length;
                textEntity['score'] = 1.0;
                allNewEntities.push(textEntity);
                entitiesToProcess.push(textEntity);
            }
            do {
                const newEntitiesToProcess = [];
                for (let i = 0; i < this.length; i++) {
                    const recognizer = this[i];
                    try {
                        const newEntities = yield recognizer.recognizeEntities(dialogContext, text, locale, entitiesToProcess);
                        for (let j = 0; j < newEntities.length; j++) {
                            const newEntity = newEntities[j];
                            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
                            if (!allNewEntities.find((entity) => !newEntity && JSON.stringify(entity) == JSON.stringify(newEntity))) {
                                allNewEntities.push(newEntity);
                                newEntitiesToProcess.push(newEntity);
                            }
                        }
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
                entitiesToProcess = newEntitiesToProcess;
            } while (entitiesToProcess.length > 0);
            return allNewEntities;
        });
    }
}
exports.EntityRecognizerSet = EntityRecognizerSet;
EntityRecognizerSet.$kind = 'Microsoft.EntityRecognizerSet';
//# sourceMappingURL=entityRecognizerSet.js.map