"use strict";
/**
 * @module botbuilder-dialogs-adaptive
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValueRecognizer = void 0;
const botbuilder_1 = require("botbuilder");
const adaptiveRecognizer_1 = require("./adaptiveRecognizer");
class ValueRecognizer extends adaptiveRecognizer_1.AdaptiveRecognizer {
    recognize(dialogContext, activity, telemetryProperties, telemetryMetrics) {
        return __awaiter(this, void 0, void 0, function* () {
            const recognizerResult = {
                text: activity.text,
                intents: {},
                entities: {},
            };
            if (activity.type == botbuilder_1.ActivityTypes.Message) {
                if (!activity.text && activity.value) {
                    const value = activity.value;
                    for (const property in value) {
                        if (property.toLowerCase() == 'intent') {
                            recognizerResult.intents[value[property]] = { score: 1.0 };
                        }
                        else {
                            if (!recognizerResult.entities.hasOwnProperty(property)) {
                                recognizerResult.entities[property] = [];
                            }
                            recognizerResult.entities[property].push(value[property]);
                        }
                    }
                }
            }
            this.trackRecognizerResult(dialogContext, 'ValueRecognizerResult', this.fillRecognizerResultTelemetryProperties(recognizerResult, telemetryProperties, dialogContext), telemetryMetrics);
            return recognizerResult;
        });
    }
}
exports.ValueRecognizer = ValueRecognizer;
//# sourceMappingURL=valueRecognizer.js.map