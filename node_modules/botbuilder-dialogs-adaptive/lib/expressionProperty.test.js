"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/explicit-function-return-type */
const assert = __importStar(require("assert"));
const __1 = require("../");
describe('expressionProperty tests', () => {
    it('DialogExpression', () => {
        const dialog = new __1.AdaptiveDialog('AskNameDialog');
        const data = { test: dialog };
        let val = new __1.DialogExpression('=test');
        let result = val.getValue(data);
        assert.equal(result, dialog);
        val = new __1.DialogExpression('test');
        result = val.getValue(data);
        assert.equal(result, 'test');
        val = new __1.DialogExpression(dialog);
        result = val.getValue(data);
        assert.equal(result, dialog);
    });
});
//# sourceMappingURL=expressionProperty.test.js.map