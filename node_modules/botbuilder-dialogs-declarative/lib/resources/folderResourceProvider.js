"use strict";
/**
 * @module botbuilder-dialogs-declarative
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FolderResourceProvider = void 0;
const chokidar_1 = require("chokidar");
const path_1 = require("path");
const fileResource_1 = require("./fileResource");
const resourceProvider_1 = require("./resourceProvider");
const pathUtil_1 = require("../pathUtil");
/**
 * Class which gives resource explorer access to resources which are stored in file system.
 */
class FolderResourceProvider extends resourceProvider_1.ResourceProvider {
    /**
     * Initializes a new instance of the `FolderResourceProvider` class.
     * @param resourceExplorer Resource explorer.
     * @param folder Root folder.
     * @param includeSubFolders Whether include its sub folders.
     * @param monitorChanges Whether monitor changes.
     */
    constructor(resourceExplorer, folder, includeSubFolders = true, monitorChanges = true) {
        super(resourceExplorer);
        this._resources = new Map();
        /**
         * A value indicating whether to include subfolders.
         */
        this.includeSubFolders = true;
        this.includeSubFolders = includeSubFolders;
        folder = path_1.normalize(folder);
        this.directory = folder;
        this._id = this.directory;
        this.refresh();
        if (monitorChanges) {
            this._watcher = chokidar_1.watch(folder, { depth: includeSubFolders ? undefined : 1 });
            this._watcher
                .on('add', this.onResourceAdded.bind(this))
                .on('change', this.onResourceChanged.bind(this))
                .on('unlink', this.onResourceRemoved.bind(this));
        }
    }
    /**
     * Gets attached file watcher.
     */
    get watcher() {
        return this._watcher;
    }
    /**
     * Refresh any cached content and look for new content.
     */
    refresh() {
        this._resources.clear();
        const files = pathUtil_1.PathUtil.getFiles(this.directory, this.includeSubFolders);
        const filteredFiles = files.filter((filename) => this.resourceExplorer.resourceTypes.has(path_1.extname(filename).toLowerCase().replace(/^\./, '')));
        for (let i = 0; i < filteredFiles.length; i++) {
            const filename = filteredFiles[i];
            const fileResource = new fileResource_1.FileResource(filename);
            this._resources.set(fileResource.id, fileResource);
        }
    }
    /**
     * Gets resource by its id.
     * @param id Resource id.
     */
    getResource(id) {
        return this._resources.has(id) ? this._resources.get(id) : undefined;
    }
    /**
     * Gets resources by extension.
     * @param extension Resource extension.
     */
    getResources(extension) {
        extension = extension.startsWith('.') ? extension.toLowerCase() : `.${extension.toLowerCase()}`;
        const resources = [];
        for (const key of this._resources.keys()) {
            if (key.toLowerCase().endsWith(extension)) {
                resources.push(this._resources.get(key));
            }
        }
        return resources;
    }
    /**
     * @private
     */
    onResourceAdded(path) {
        const ext = path_1.extname(path.toLowerCase()).replace(/^\./, '');
        if (this.resourceExplorer.resourceTypes.has(ext)) {
            const fileResource = new fileResource_1.FileResource(path);
            if (!this._resources.has(fileResource.id)) {
                this._resources.set(fileResource.id, fileResource);
                this.onChanged(resourceProvider_1.ResourceChangeEvent.added, [fileResource]);
            }
        }
    }
    /**
     * @private
     */
    onResourceChanged(path) {
        const ext = path_1.extname(path.toLowerCase()).replace(/^\./, '');
        if (this.resourceExplorer.resourceTypes.has(ext)) {
            const fileResource = new fileResource_1.FileResource(path);
            this._resources.set(fileResource.id, fileResource);
            this.onChanged(resourceProvider_1.ResourceChangeEvent.changed, [fileResource]);
        }
    }
    /**
     * @private
     */
    onResourceRemoved(path) {
        const ext = path_1.extname(path.toLowerCase()).replace(/^\./, '');
        if (this.resourceExplorer.resourceTypes.has(ext)) {
            const fileResource = new fileResource_1.FileResource(path);
            if (this._resources.has(fileResource.id)) {
                this._resources.delete(fileResource.id);
                this.onChanged(resourceProvider_1.ResourceChangeEvent.removed, [fileResource]);
            }
        }
    }
}
exports.FolderResourceProvider = FolderResourceProvider;
//# sourceMappingURL=folderResourceProvider.js.map