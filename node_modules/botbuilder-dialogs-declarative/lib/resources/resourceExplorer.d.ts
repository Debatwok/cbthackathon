/**
 * @module botbuilder-dialogs-declarative
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Newable } from 'botbuilder-stdlib';
import { ResourceProvider, ResourceChangeEvent } from './resourceProvider';
import { Resource } from './resource';
import { CustomDeserializer } from '../customDeserializer';
import { ResourceExplorerOptions } from './resourceExplorerOptions';
/**
 * Class which gives standard access to content resources.
 */
export declare class ResourceExplorer {
    private _declarativeTypes;
    private _kindToType;
    private _kindDeserializer;
    private _eventEmitter;
    private _cache;
    private _typesLoaded;
    /**
     * Initializes a new instance of the [ResourceExplorer](botbuilder-dialogs.declarative.ResourceExplorer) class.
     *
     * @param {ResourceProvider[]} providers The list of [ResourceProvider](botbuilder-dialogs-declarative.ResourceProvider) to initialize the current instance.
     */
    constructor(providers: ResourceProvider[]);
    /**
     * Initializes a new instance of the [ResourceExplorer](botbuilder-dialogs.declarative.ResourceExplorer) class.
     *
     * @param {ResourceExplorerOptions} options The configuration options.
     */
    constructor(options?: ResourceExplorerOptions);
    /**
     * Gets resource providers.
     */
    readonly resourceProviders: ResourceProvider[];
    /**
     * Gets resource type id extensions managed by resource explorer.
     */
    readonly resourceTypes: Set<string>;
    /**
     * Event which fires when a resource is changed.
     */
    set changed(callback: (event: ResourceChangeEvent, resources: Resource[]) => void);
    /**
     * Add a resource type to resource type set.
     *
     * @param {string} type Resource type.
     */
    addResourceType(type: string): void;
    /**
     * Reload any cached data.
     */
    refresh(): void;
    /**
     * Add a resource provider to the resources managed by resource explorer.
     *
     * @param {ResourceProvider} resourceProvider Resource provider to be added.
     * @returns {ResourceExplorer} Resource explorer so that you can fluently call multiple methods on the resource explorer.
     */
    addResourceProvider(resourceProvider: ResourceProvider): ResourceExplorer;
    /**
     * Add a folder resource.
     *
     * @param {string}  folder Folder to be included as a resource.
     * @param {boolean} includeSubFolders Whether to include subfolders.
     * @param {boolean} monitorChanges Whether to track changes.
     * @returns {ResourceExplorer} Resource explorer so that you can fluently call multiple methods on the resource explorer.
     */
    addFolder(folder: string, includeSubFolders?: boolean, monitorChanges?: boolean): ResourceExplorer;
    /**
     * Add folder resources.
     *
     * @param {string} folder Collection of folders to be included as resources.
     * @param {string[]} ignoreFolders Imediate subfolders to ignore.
     * @param {boolean} monitorChanges Whether to track changes.
     * @returns {ResourceExplorer} Resource explorer so that you can fluently call multiple methods on the resource explorer.
     */
    addFolders(folder: string, ignoreFolders?: string[], monitorChanges?: boolean): ResourceExplorer;
    /**
     * Get resources of a given type extension.
     *
     * @param {string} fileExtension File extension filter.
     * @returns {Resource[]} The resources.
     */
    getResources(fileExtension: string): Resource[];
    /**
     * Gets resource by id.
     *
     * @param {string} id Resource id.
     * @returns {Resource} The resource, or undefined if not found.
     */
    getResource(id: string): Resource;
    /**
     * Register a declarative type with the resource loader system.
     *
     * @template T The type of object.
     * @param {string} kind The $kind name to map to this type.
     * @param {Newable<T>} type Type of object to create.
     * @param {CustomDeserializer}  loader Optional custom deserializer.
     * @returns {ResourceExplorer} Resource explorer for fluent style multiple calls.
     */
    registerType<T>(kind: string, type: Newable<T>, loader?: CustomDeserializer<T, Record<string, unknown>>): ResourceExplorer;
    /**
     * Build type for given $kind from configuration.
     *
     * @template T Type of object.
     * @template C Type of configuration
     * @param {string} kind $kind.
     * @param {C} config Source configuration object.
     * @returns {T} Instantiated object.
     */
    buildType<T, C>(kind: string, config: C): T;
    /**
     * Load type from resource
     *
     * @template T Type of object.
     * @param {string} resourceId Resource id to bind to.
     * @returns {T} Type created from resource
     */
    loadType<T>(resourceId: string): T;
    /**
     * Load type from resource
     *
     * @template T Type of object.
     * @param {Resource} resource Resource id to bind to.
     * @returns {T} Type created from resource
     */
    loadType<T>(resource: Resource): T;
    /**
     * Handler for onChanged events.
     *
     * @param {ResourceChangeEvent} event Event name.
     * @param {Resource} resources A collection of resources changed.
     */
    protected onChanged(event: ResourceChangeEvent, resources: Resource[]): void;
    private load;
    private preload;
    private registerTypeInternal;
    private registerComponentTypes;
}
//# sourceMappingURL=resourceExplorer.d.ts.map