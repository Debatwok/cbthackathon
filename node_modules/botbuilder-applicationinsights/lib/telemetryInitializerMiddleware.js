"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryInitializerMiddleware = void 0;
const appInsights = require("applicationinsights");
/**
 * Middleware for storing the incoming activity to be made available to Application Insights and optionally run the TelemetryLoggerMiddleware.
 * Uses the botTelemetryClient interface.
 */
class TelemetryInitializerMiddleware {
    /**
     * Initializes a new instance of the TelemetryInitializerMiddleware class.
     *
     * @param telemetryLoggerMiddleware The TelemetryLoggerMiddleware used for logging activity telemetry.
     * @param logActivityTelemetry (Optional) Enable/Disable logging of activity telemetry.
     */
    constructor(telemetryLoggerMiddleware, logActivityTelemetry = false) {
        this._telemetryLoggerMiddleware = telemetryLoggerMiddleware;
        this._logActivityTelemetry = logActivityTelemetry;
    }
    /**
     * Gets a value indicating whether determines whether to call the telemetry logging middleware to log activity events.
     *
     * @returns whether or not to log activity telemetry
     */
    get logActivityTelemetry() {
        return this._logActivityTelemetry;
    }
    /**
     * Gets the currently configured TelemetryLoggerMiddleware that logs activity events.
     *
     * @returns telemetry logger middleware
     */
    get telemetryClient() {
        return this._telemetryLoggerMiddleware;
    }
    /**
     * Sets the correlation context so that a mock context can be passed in for testing purposes.
     */
    set appInsightsCorrelationContext(value) {
        this._correlationContext = value;
    }
    /**
     * Gets the correlation context that can be used for testing purposes.
     *
     * @returns app insights correlation context
     */
    get appInsightsCorrelationContext() {
        return this._correlationContext;
    }
    /**
     * Store the incoming activity on the App Insights Correlation Context and optionally calls the TelemetryLoggerMiddleware
     *
     * @param context The context object for this turn.
     * @param next The delegate to call to continue the bot middleware pipeline
     */
    onTurn(context, next) {
        return __awaiter(this, void 0, void 0, function* () {
            if (context === null) {
                throw new Error('context is null');
            }
            if (context.activity && context.activity.id) {
                const correlationContext = this._correlationContext || appInsights.getCorrelationContext();
                if (correlationContext) {
                    correlationContext['activity'] = context.activity;
                }
            }
            if (this._logActivityTelemetry && this._telemetryLoggerMiddleware) {
                yield this._telemetryLoggerMiddleware.onTurn(context, next);
            }
            else if (next !== null) {
                yield next();
            }
        });
    }
}
exports.TelemetryInitializerMiddleware = TelemetryInitializerMiddleware;
//# sourceMappingURL=telemetryInitializerMiddleware.js.map