import { TelemetryLoggerMiddleware } from 'botbuilder-core';
import { Middleware } from 'botbuilder-core';
import { TurnContext } from 'botbuilder-core';
import { CorrelationContext } from 'applicationinsights/out/AutoCollection/CorrelationContextManager';
/**
 * Middleware for storing the incoming activity to be made available to Application Insights and optionally run the TelemetryLoggerMiddleware.
 * Uses the botTelemetryClient interface.
 */
export declare class TelemetryInitializerMiddleware implements Middleware {
    private readonly _logActivityTelemetry;
    private readonly _telemetryLoggerMiddleware;
    private _correlationContext;
    /**
     * Initializes a new instance of the TelemetryInitializerMiddleware class.
     *
     * @param telemetryLoggerMiddleware The TelemetryLoggerMiddleware used for logging activity telemetry.
     * @param logActivityTelemetry (Optional) Enable/Disable logging of activity telemetry.
     */
    constructor(telemetryLoggerMiddleware: TelemetryLoggerMiddleware, logActivityTelemetry?: boolean);
    /**
     * Gets a value indicating whether determines whether to call the telemetry logging middleware to log activity events.
     *
     * @returns whether or not to log activity telemetry
     */
    get logActivityTelemetry(): boolean;
    /**
     * Gets the currently configured TelemetryLoggerMiddleware that logs activity events.
     *
     * @returns telemetry logger middleware
     */
    get telemetryClient(): TelemetryLoggerMiddleware;
    /**
     * Sets the correlation context so that a mock context can be passed in for testing purposes.
     */
    protected set appInsightsCorrelationContext(value: CorrelationContext);
    /**
     * Gets the correlation context that can be used for testing purposes.
     *
     * @returns app insights correlation context
     */
    protected get appInsightsCorrelationContext(): CorrelationContext;
    /**
     * Store the incoming activity on the App Insights Correlation Context and optionally calls the TelemetryLoggerMiddleware
     *
     * @param context The context object for this turn.
     * @param next The delegate to call to continue the bot middleware pipeline
     */
    onTurn(context: TurnContext, next: () => Promise<void>): Promise<void>;
}
//# sourceMappingURL=telemetryInitializerMiddleware.d.ts.map